{"version":3,"file":"static/js/805.c62531f5.chunk.js","mappings":"sOAKO,MAAMA,EAAcA,KACvB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAG1BC,EAAaC,IAAkBF,EAAAA,EAAAA,WAAS,IACxCG,GAAQC,EAAAA,EAAKC,UAWpB,IATAC,EAAAA,EAAAA,YAAU,KAGN,MAAMC,GAAcC,EAAAA,EAAAA,MAChBD,GACAR,EAAQQ,EACZ,GACD,KAEET,EACD,OAAOW,EAAAA,EAAAA,KAAA,OAAAC,SAAK,wDAMhB,MAMMC,EAAeA,KACjBT,GAAe,GACfC,EAAKS,aAAa,EAuBtB,OACIC,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,SAAU,KAAML,SAAA,EAC1BG,EAAAA,EAAAA,MAACG,EAAAA,EAAI,CAACC,MAAM,gEAAaP,SAAA,EACrBG,EAAAA,EAAAA,MAAA,KAAAH,SAAA,EACID,EAAAA,EAAAA,KAAA,KAAAC,SAAG,oCAAU,IAAEZ,EAAKoB,aAExBL,EAAAA,EAAAA,MAAA,KAAAH,SAAA,EACID,EAAAA,EAAAA,KAAA,KAAAC,SAAG,8BAAS,IAAEZ,EAAKqB,QAIR,YAAdrB,EAAKqB,OACFV,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CAACC,KAAK,UAAUC,QA3CRC,KAC3BrB,GAAe,GACfC,EAAKS,aAAa,EAyCiDF,SAAC,oGAOhED,EAAAA,EAAAA,KAACe,EAAAA,EAAK,CACFP,MAAM,yIACNQ,KAAMxB,EACNyB,SAAUf,EACVgB,KAAMA,IAAMxB,EAAKyB,SAAUlB,UAE3BG,EAAAA,EAAAA,MAACT,EAAAA,EAAI,CACDD,KAAMA,EACN0B,OAAO,WACPC,SA/CYC,UACxB,MAAM,SAAEb,EAAQ,SAAEc,GAAaC,EAC/B,UAGUC,EAAAA,GAAGC,WAAW,UAAUC,OAAO,CACjClB,WACAc,WACAK,gBAAiBL,EACjBb,KAAM,YAEVmB,EAAAA,GAAaC,QAAQ,CAAEC,QAAS,gIAChC7B,GACJ,CAAE,MAAO8B,GACLC,QAAQD,MAAM,6JAAiCA,GAC/CH,EAAAA,GAAaG,MAAM,CAAED,QAAS,uJAClC,GA+B0C9B,SAAA,EAE9BD,EAAAA,EAAAA,KAACL,EAAAA,EAAKuC,KAAI,CACNC,MAAM,kFACNC,KAAK,WACLC,MAAO,CAAC,CAAEC,UAAU,EAAMP,QAAS,8EAAmB9B,UAEtDD,EAAAA,EAAAA,KAACuC,EAAAA,EAAK,OAEVvC,EAAAA,EAAAA,KAACL,EAAAA,EAAKuC,KAAI,CACNC,MAAM,uCACNC,KAAK,WACLC,MAAO,CAAC,CAAEC,UAAU,EAAMP,QAAS,oFAAoB9B,UAEvDD,EAAAA,EAAAA,KAACuC,EAAAA,EAAMC,SAAQ,aAIzB,C","sources":["pages/ProfilePage/ui/ProfilePage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Card, Button, Modal, Form, Input, notification } from \"antd\";\nimport { getSession } from \"../../../features/auth/model/session\";\nimport { pb } from \"../../../shared/config/pb\"; // наш клиент PocketBase\n\nexport const ProfilePage = () => {\n    const [user, setUser] = useState(null);\n\n    // --- Создание студента (только для преподавателя)\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [form] = Form.useForm();\n\n    useEffect(() => {\n        // Получаем текущего авторизованного пользователя из localStorage\n        // (здесь user может содержать { id, username, role, token } и т.д.)\n        const sessionUser = getSession();\n        if (sessionUser) {\n            setUser(sessionUser);\n        }\n    }, []);\n\n    if (!user) {\n        return <div>Загрузка...</div>;\n    }\n\n    // ---------------------------\n    // Открыть модалку \"Добавить студента\"\n    // ---------------------------\n    const openCreateStudentModal = () => {\n        setIsModalOpen(true);\n        form.resetFields();\n    };\n\n    // Закрытие модалки\n    const handleCancel = () => {\n        setIsModalOpen(false);\n        form.resetFields();\n    };\n\n    // Сабмит формы: создать студента в PocketBase\n    const handleCreateStudent = async (values) => {\n        const { username, password } = values;\n        try {\n            // Создаём запись в вашей Auth Collection (назовём \"users2\")\n            // role = \"student\"\n            await pb.collection(\"users2\").create({\n                username,\n                password,\n                passwordConfirm: password,\n                role: \"student\",\n            });\n            notification.success({ message: \"Студент успешно создан!\" });\n            handleCancel();\n        } catch (error) {\n            console.error(\"Ошибка при создании студента:\", error);\n            notification.error({ message: \"Не удалось создать студента\" });\n        }\n    };\n\n    return (\n        <div style={{ maxWidth: 600 }}>\n            <Card title=\"Мой профиль\">\n                <p>\n                    <b>Логин:</b> {user.username}\n                </p>\n                <p>\n                    <b>Роль:</b> {user.role}\n                </p>\n\n                {/* Кнопка \"Создать студента\" только для учителя */}\n                {user.role === \"teacher\" && (\n                    <Button type=\"primary\" onClick={openCreateStudentModal}>\n                        Создать студента\n                    </Button>\n                )}\n            </Card>\n\n            {/* Модальное окно для создания студента */}\n            <Modal\n                title=\"Создать аккаунт студента\"\n                open={isModalOpen}\n                onCancel={handleCancel}\n                onOk={() => form.submit()} // Тригерим сабмит формы\n            >\n                <Form\n                    form={form}\n                    layout=\"vertical\"\n                    onFinish={handleCreateStudent}\n                >\n                    <Form.Item\n                        label=\"Логин студента\"\n                        name=\"username\"\n                        rules={[{ required: true, message: \"Введите логин\" }]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Пароль\"\n                        name=\"password\"\n                        rules={[{ required: true, message: \"Введите пароль\" }]}\n                    >\n                        <Input.Password />\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </div>\n    );\n};\n"],"names":["ProfilePage","user","setUser","useState","isModalOpen","setIsModalOpen","form","Form","useForm","useEffect","sessionUser","getSession","_jsx","children","handleCancel","resetFields","_jsxs","style","maxWidth","Card","title","username","role","Button","type","onClick","openCreateStudentModal","Modal","open","onCancel","onOk","submit","layout","onFinish","async","password","values","pb","collection","create","passwordConfirm","notification","success","message","error","console","Item","label","name","rules","required","Input","Password"],"sourceRoot":""}