{"version":3,"file":"static/js/805.85fe7631.chunk.js","mappings":"8NAMO,MAAMA,EAAcA,KACvB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAC1BC,EAAaC,IAAkBF,EAAAA,EAAAA,WAAS,IAGxCG,GAAQC,EAAAA,EAAKC,UAapB,IAXAC,EAAAA,EAAAA,YAAU,KACN,MAAMC,GAAcC,EAAAA,EAAAA,MACpB,IAAKD,EAED,OAGJ,MAAME,GAAWC,EAAAA,EAAAA,IAAeH,EAAYI,OAC5CZ,EAAQU,EAAS,GAClB,KAEEX,EACD,OAAO,KAGX,MASMc,EAAaA,KACfV,GAAe,GACfC,EAAKU,aAAa,EAqBtB,OACIC,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,SAAU,KAAMC,SAAA,EAC1BH,EAAAA,EAAAA,MAACI,EAAAA,EAAI,CAACC,MAAM,gEAAaF,SAAA,EACrBH,EAAAA,EAAAA,MAAA,KAAAG,SAAA,EACIG,EAAAA,EAAAA,KAAA,KAAAH,SAAG,oCAAU,IAAEnB,EAAKa,UAExBG,EAAAA,EAAAA,MAAA,KAAAG,SAAA,EACIG,EAAAA,EAAAA,KAAA,KAAAH,SAAG,6DAAe,IAAEnB,EAAKuB,aAE7BP,EAAAA,EAAAA,MAAA,KAAAG,SAAA,EACIG,EAAAA,EAAAA,KAAA,KAAAH,SAAG,8BAAS,IAAEnB,EAAKwB,SAGvBF,EAAAA,EAAAA,KAACG,EAAAA,GAAM,CAACC,KAAK,UAAUC,QA7CjBC,KACdxB,GAAe,GAEfC,EAAKwB,eAAe,CAChBN,SAAUvB,EAAKuB,SACfO,SAAU9B,EAAK8B,UACjB,EAuCgDX,SAAC,uFAK/CG,EAAAA,EAAAA,KAACS,EAAAA,EAAK,CACFV,MAAM,4HACNW,QAAS7B,EACT8B,SAAUnB,EACVoB,KAxCOC,KACf9B,EAAK+B,iBAAiBC,MAAMC,IACxB,MAAM,SAAEf,EAAQ,SAAEO,GAAaQ,EAGzBC,GAAUC,EAAAA,EAAAA,IAAWxC,EAAKa,MAAO,CAAEU,WAAUO,aAEnD7B,EAAQsC,IAKRE,EAAAA,EAAAA,IAAWF,GAEXzB,GAAY,GACd,EAyBuBK,UAEjBH,EAAAA,EAAAA,MAACV,EAAAA,EAAI,CAACD,KAAMA,EAAMqC,OAAO,WAAUvB,SAAA,EAC/BG,EAAAA,EAAAA,KAAChB,EAAAA,EAAKqC,KAAI,CACNC,MAAM,0DACNC,KAAK,WACLC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,2FAAsB7B,UAEzDG,EAAAA,EAAAA,KAAC2B,EAAAA,EAAK,OAEV3B,EAAAA,EAAAA,KAAChB,EAAAA,EAAKqC,KAAI,CACNC,MAAM,uCACNC,KAAK,WACLC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,oFAAoB7B,UAEvDG,EAAAA,EAAAA,KAAC2B,EAAAA,EAAMC,SAAQ,aAIzB,C","sources":["pages/ProfilePage/ui/ProfilePage.jsx"],"sourcesContent":["// pages/ProfilePage/ui/ProfilePage.jsx\nimport React, { useEffect, useState } from \"react\";\nimport { Card, Button, Modal, Form, Input } from \"antd\";\nimport { getSession, setSession } from \"../../../features/auth/model/session\";\nimport { getUserByLogin, updateUser } from \"../../../entities/user/model/usersStorage\";\n\nexport const ProfilePage = () => {\n    const [user, setUser] = useState(null);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    // Форма редактирования\n    const [form] = Form.useForm();\n\n    useEffect(() => {\n        const sessionUser = getSession();\n        if (!sessionUser) {\n            // если нет - логика редиректа или return\n            return;\n        }\n        // Загружаем из хранилища полную информацию (вдруг она изменилась)\n        const fullUser = getUserByLogin(sessionUser.login);\n        setUser(fullUser);\n    }, []);\n\n    if (!user) {\n        return null;\n    }\n\n    const openModal = () => {\n        setIsModalOpen(true);\n        // Заполняем форму текущими данными\n        form.setFieldsValue({\n            fullName: user.fullName,\n            password: user.password,\n        });\n    };\n\n    const closeModal = () => {\n        setIsModalOpen(false);\n        form.resetFields();\n    };\n\n    const handleSave = () => {\n        form.validateFields().then((values) => {\n            const { fullName, password } = values;\n\n            // Обновляем пользователя в localStorage\n            const updated = updateUser(user.login, { fullName, password });\n            // Обновим state\n            setUser(updated);\n\n            // Если мы изменили password, то логин остаётся тот же, но при повторном входе\n            // нужно использовать новый пароль.\n            // Также нужно обновить \"currentUser\" в session\n            setSession(updated);\n\n            closeModal();\n        });\n    };\n\n    return (\n        <div style={{ maxWidth: 600 }}>\n            <Card title=\"Мой профиль\">\n                <p>\n                    <b>Логин:</b> {user.login}\n                </p>\n                <p>\n                    <b>Полное имя:</b> {user.fullName}\n                </p>\n                <p>\n                    <b>Роль:</b> {user.role}\n                </p>\n\n                <Button type=\"primary\" onClick={openModal}>\n                    Редактировать\n                </Button>\n            </Card>\n\n            <Modal\n                title=\"Редактировать профиль\"\n                visible={isModalOpen}\n                onCancel={closeModal}\n                onOk={handleSave}\n            >\n                <Form form={form} layout=\"vertical\">\n                    <Form.Item\n                        label=\"Полное имя\"\n                        name=\"fullName\"\n                        rules={[{ required: true, message: \"Введите ваше имя\" }]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Пароль\"\n                        name=\"password\"\n                        rules={[{ required: true, message: \"Введите пароль\" }]}\n                    >\n                        <Input.Password />\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </div>\n    );\n};\n"],"names":["ProfilePage","user","setUser","useState","isModalOpen","setIsModalOpen","form","Form","useForm","useEffect","sessionUser","getSession","fullUser","getUserByLogin","login","closeModal","resetFields","_jsxs","style","maxWidth","children","Card","title","_jsx","fullName","role","Button","type","onClick","openModal","setFieldsValue","password","Modal","visible","onCancel","onOk","handleSave","validateFields","then","values","updated","updateUser","setSession","layout","Item","label","name","rules","required","message","Input","Password"],"sourceRoot":""}