{"version":3,"file":"static/js/583.78017699.chunk.js","mappings":"mKAEA,MAAMA,EAAc,UAGdC,EAAiB,CACnB,CACIC,GAAI,IACJC,MAAO,+DACPC,YAAa,gJACbC,UAAW,WAEf,CACIH,GAAI,IACJC,MAAO,uCACPC,YAAa,2GACbC,UAAW,YAKZ,SAASC,IACZ,MAAMC,EAAOC,aAAaC,QAAQT,GAClC,IAAKO,EAGD,OADAC,aAAaE,QAAQV,EAAaW,KAAKC,UAAUX,IAC1CA,EAEX,IACI,OAAOU,KAAKE,MAAMN,EACtB,CAAE,MAAOO,GAEL,OADAC,QAAQC,MAAM,uJAA0CF,GACjD,EACX,CACJ,CAGO,SAASG,EAAcf,GAE1B,OADgBI,IACDY,MAAMC,GAAMA,EAAEjB,KAAOA,KAAO,IAC/C,CAGA,SAASkB,EAAeC,GACpBb,aAAaE,QAAQV,EAAaW,KAAKC,UAAUS,GACrD,CAGO,SAASC,EAAaC,GACzB,MAAMF,EAAUf,IAEVkB,EAAQC,OAAOC,KAAKC,OACpBC,GAASC,EAAAA,EAAAA,GAAA,CAAK3B,GAAIsB,GAAUD,GAGlC,OAFAF,EAAQS,KAAKF,GACbR,EAAeC,GACRO,CACX,CAGO,SAASG,EAAa7B,EAAI8B,GAC7B,MAAMX,EAAUf,IACV2B,EAAQZ,EAAQa,WAAWf,GAAMA,EAAEjB,KAAOA,IAChD,OAAe,IAAX+B,EAAqB,MAEzBZ,EAAQY,IAAMJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQR,EAAQY,IAAWD,GACzCZ,EAAeC,GACRA,EAAQY,GACnB,CAGO,SAASE,EAAajC,GACzB,IAAImB,EAAUf,IACde,EAAUA,EAAQe,QAAQjB,GAAMA,EAAEjB,KAAOA,IACzCkB,EAAeC,EACnB,C,oKCjEO,MAAMgB,EAAcA,KACvB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAOC,EAAAA,EAAAA,OACNpB,EAASqB,IAAcC,EAAAA,EAAAA,UAAS,KAGhCC,EAAaC,IAAkBF,EAAAA,EAAAA,WAAS,IACxCG,GAAQC,EAAAA,EAAKC,WAEpBC,EAAAA,EAAAA,YAAU,KACN,IAAI1C,GAAOD,EAAAA,EAAAA,MAEXC,EAAOA,EAAK2C,MAAK,CAACC,EAAGC,IAAM,IAAI1B,KAAK0B,EAAEC,WAAa,IAAI3B,KAAKyB,EAAEE,aAC9DX,EAAWnC,EAAK,GACjB,IAGH,MAAM+C,EAAU,CACZ,CACInD,MAAO,mDACPoD,UAAW,QACXC,IAAK,SAET,CACIrD,MAAO,mDACPoD,UAAW,cACXC,IAAK,eAET,CACIrD,MAAO,mDACPqD,IAAK,UACLC,OAAQA,CAACC,EAAMC,KACXC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,KAAK,OAAOC,QAASA,IAAMzB,EAAS,YAAD0B,OAAaL,EAAOzD,KAAM+D,SAAC,iDAa5EC,EAAeA,KACjBrB,GAAe,GACfC,EAAKqB,aAAa,EAqCtB,OACIC,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACIL,EAAAA,EAAAA,KAAA,MAAAK,SAAI,8EAEY,aAAX,OAAJzB,QAAI,IAAJA,OAAI,EAAJA,EAAM6B,QACHT,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,KAAK,UAAUC,QAjDXO,KACpBzB,GAAe,EAAK,EAgDqC0B,MAAO,CAAEC,aAAc,IAAKP,SAAC,+EAKlFL,EAAAA,EAAAA,KAACa,EAAAA,EAAK,CACFC,OAAO,KACPpB,QAASA,EACTqB,WAAYtD,EACZuD,YAAY,KAIhBhB,EAAAA,EAAAA,KAACiB,EAAAA,EAAK,CACF1E,MAAM,4EACN2E,KAAMlC,EACNmC,SAAUb,EACVc,KAAMA,IAAMlC,EAAKmC,SAAShB,UAE1BG,EAAAA,EAAAA,MAACrB,EAAAA,EAAI,CACDD,KAAMA,EACNoC,OAAO,WACPC,SA5DKC,UACjB,IACI,MAAM,MAAEjF,EAAK,YAAEC,GAAgBiF,EAEzBzD,GAAYN,EAAAA,EAAAA,IAAa,CAC3BnB,QACAC,cACAC,UAAWmC,EAAK8C,MAChBjC,WAAW,IAAI3B,MAAO6D,gBAI1B7C,GAAY8C,GACQ,IAAIA,EAAM5D,GACXsB,MAAK,CAACC,EAAGC,IAAM,IAAI1B,KAAK0B,EAAEC,WAAa,IAAI3B,KAAKyB,EAAEE,eAIrEoC,EAAAA,GAAaC,QAAQ,CAAEC,QAAS,8GAGhCzB,GACJ,CAAE,MAAOlD,GACLD,QAAQC,MAAMA,GACdyE,EAAAA,GAAazE,MAAM,CAAE2E,QAAS,2IAClC,GAoCYC,eAhCYC,IACxB9E,QAAQ+E,IAAI,qBAAsBD,EAAU,EA+BG5B,SAAA,EAEnCL,EAAAA,EAAAA,KAACb,EAAAA,EAAKgD,KAAI,CACNC,MAAM,kFACNC,KAAK,QACLC,MAAO,CAAC,CAAEC,UAAU,EAAMR,QAAS,+HAA4B1B,UAE/DL,EAAAA,EAAAA,KAACwC,EAAAA,EAAK,OAEVxC,EAAAA,EAAAA,KAACb,EAAAA,EAAKgD,KAAI,CACNC,MAAM,mDACNC,KAAK,cACLC,MAAO,CAAC,CAAEC,UAAU,EAAMR,QAAS,+HAA4B1B,UAE/DL,EAAAA,EAAAA,KAACwC,EAAAA,EAAMC,SAAQ,CAACC,KAAM,aAIhC,C","sources":["entities/course/model/courseStorage.js","pages/CoursesPage/ui/CoursesPage.jsx"],"sourcesContent":["// entities/course/model/courseStorage.js\n\nconst STORAGE_KEY = \"courses\";\n\n// Стартовый (mock) список курсов (можно загрузить при первом запуске)\nconst initialCourses = [\n    {\n        id: \"1\",\n        title: \"Математика\",\n        description: \"Базовый курс по математике\",\n        teacherId: \"teacher\", // условно привяжем к логину преподавателя\n    },\n    {\n        id: \"2\",\n        title: \"Физика\",\n        description: \"Введение в механику\",\n        teacherId: \"teacher\",\n    },\n];\n\n// Функция получения списка из localStorage\nexport function getAllCourses() {\n    const data = localStorage.getItem(STORAGE_KEY);\n    if (!data) {\n        // Если ничего нет в localStorage, записываем initialCourses\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(initialCourses));\n        return initialCourses;\n    }\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        console.error(\"Ошибка парсинга курсов из localStorage\", e);\n        return [];\n    }\n}\n\n// Функция поиска курса по id\nexport function getCourseById(id) {\n    const courses = getAllCourses();\n    return courses.find((c) => c.id === id) || null;\n}\n\n// Сохранить весь массив курсов\nfunction saveAllCourses(courses) {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(courses));\n}\n\n// Создать новый курс\nexport function createCourse(courseData) {\n    const courses = getAllCourses();\n    // Генерация условного ID\n    const newId = String(Date.now());\n    const newCourse = { id: newId, ...courseData };\n    courses.push(newCourse);\n    saveAllCourses(courses);\n    return newCourse;\n}\n\n// Обновить существующий курс\nexport function updateCourse(id, updates) {\n    const courses = getAllCourses();\n    const index = courses.findIndex((c) => c.id === id);\n    if (index === -1) return null;\n\n    courses[index] = { ...courses[index], ...updates };\n    saveAllCourses(courses);\n    return courses[index];\n}\n\n// Удалить курс\nexport function deleteCourse(id) {\n    let courses = getAllCourses();\n    courses = courses.filter((c) => c.id !== id);\n    saveAllCourses(courses);\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Table, Button, Modal, Form, Input, notification } from \"antd\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getSession } from \"../../../features/auth/model/session\";\nimport {\n    getAllCourses,\n    createCourse,\n} from \"../../../entities/course/model/courseStorage\";\n\nexport const CoursesPage = () => {\n    const navigate = useNavigate();\n    const user = getSession();\n    const [courses, setCourses] = useState([]);\n\n    // Модалка для создания курса\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [form] = Form.useForm();\n\n    useEffect(() => {\n        let data = getAllCourses();\n        // Сортируем курсы (новые сверху)\n        data = data.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n        setCourses(data);\n    }, []);\n\n    // Колонки таблицы\n    const columns = [\n        {\n            title: \"Название\",\n            dataIndex: \"title\",\n            key: \"title\",\n        },\n        {\n            title: \"Описание\",\n            dataIndex: \"description\",\n            key: \"description\",\n        },\n        {\n            title: \"Действия\",\n            key: \"actions\",\n            render: (text, record) => (\n                <Button type=\"link\" onClick={() => navigate(`/courses/${record.id}`)}>\n                    Открыть\n                </Button>\n            ),\n        },\n    ];\n\n    // Открытие модалки\n    const handleOpenModal = () => {\n        setIsModalOpen(true);\n    };\n\n    // Закрыть модалку\n    const handleCancel = () => {\n        setIsModalOpen(false);\n        form.resetFields();\n    };\n\n    // Успешная валидация формы -> создание курса\n    const handleFinish = async (values) => {\n        try {\n            const { title, description } = values;\n            // При создании добавляем поле createdAt\n            const newCourse = createCourse({\n                title,\n                description,\n                teacherId: user.login,\n                createdAt: new Date().toISOString(),\n            });\n\n            // Добавляем новый курс в список и сортируем заново\n            setCourses((prev) => {\n                const updated = [...prev, newCourse];\n                return updated.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n            });\n\n            // Уведомление об успехе\n            notification.success({ message: \"Курс успешно создан!\" });\n\n            // Закрываем модалку\n            handleCancel();\n        } catch (error) {\n            console.error(error);\n            notification.error({ message: \"Ошибка при создании курса\" });\n        }\n    };\n\n    // Ошибка валидации\n    const handleFinishFailed = (errorInfo) => {\n        console.log(\"Validation Failed:\", errorInfo);\n    };\n\n    return (\n        <div>\n            <h2>Список курсов</h2>\n\n            {user?.role === \"teacher\" && (\n                <Button type=\"primary\" onClick={handleOpenModal} style={{ marginBottom: 16 }}>\n                    Добавить курс\n                </Button>\n            )}\n\n            <Table\n                rowKey=\"id\"\n                columns={columns}\n                dataSource={courses}\n                pagination={false}\n            />\n\n            {/* Модальное окно для создания курса */}\n            <Modal\n                title=\"Добавить курс\"\n                open={isModalOpen}\n                onCancel={handleCancel}\n                onOk={() => form.submit()}\n            >\n                <Form\n                    form={form}\n                    layout=\"vertical\"\n                    onFinish={handleFinish}\n                    onFinishFailed={handleFinishFailed}\n                >\n                    <Form.Item\n                        label=\"Название курса\"\n                        name=\"title\"\n                        rules={[{ required: true, message: \"Введите название курса\" }]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Описание\"\n                        name=\"description\"\n                        rules={[{ required: true, message: \"Введите описание курса\" }]}\n                    >\n                        <Input.TextArea rows={3} />\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </div>\n    );\n};\n"],"names":["STORAGE_KEY","initialCourses","id","title","description","teacherId","getAllCourses","data","localStorage","getItem","setItem","JSON","stringify","parse","e","console","error","getCourseById","find","c","saveAllCourses","courses","createCourse","courseData","newId","String","Date","now","newCourse","_objectSpread","push","updateCourse","updates","index","findIndex","deleteCourse","filter","CoursesPage","navigate","useNavigate","user","getSession","setCourses","useState","isModalOpen","setIsModalOpen","form","Form","useForm","useEffect","sort","a","b","createdAt","columns","dataIndex","key","render","text","record","_jsx","Button","type","onClick","concat","children","handleCancel","resetFields","_jsxs","role","handleOpenModal","style","marginBottom","Table","rowKey","dataSource","pagination","Modal","open","onCancel","onOk","submit","layout","onFinish","async","values","login","toISOString","prev","notification","success","message","onFinishFailed","errorInfo","log","Item","label","name","rules","required","Input","TextArea","rows"],"sourceRoot":""}