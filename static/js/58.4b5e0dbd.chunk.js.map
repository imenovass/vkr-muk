{"version":3,"file":"static/js/58.4b5e0dbd.chunk.js","mappings":"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","sources":["entities/schedule/model/scheduleStorage.js","shared/ui/Card/Card.jsx","entities/news/model/newsStorage.js","pages/NewsPage/ui/utils.js","pages/NewsPage/ui/NewsPage.jsx","pages/DashboardPage/ui/DashboardPage.jsx"],"sourcesContent":["// entities/schedule/model/scheduleStorage.js\n\nconst SCHEDULE_KEY = \"schedule\";\n\n// Какие-то начальные данные (mock)\nconst initialSchedule = [\n    {\n        id: \"101\",\n        courseId: \"1\",      // курс Математика\n        date: \"2025-02-01\", // YYYY-MM-DD\n        time: \"10:00\",      // строка (HH:mm)\n        room: \"Аудитория 305\",\n    },\n    {\n        id: \"102\",\n        courseId: \"2\",      // курс Физика\n        date: \"2025-02-02\",\n        time: \"12:30\",\n        room: \"Лаборатория 2\",\n    },\n];\n\nfunction saveSchedule(scheduleList) {\n    localStorage.setItem(SCHEDULE_KEY, JSON.stringify(scheduleList));\n}\n\n// Получаем все события расписания\nexport function getAllSchedule() {\n    const data = localStorage.getItem(SCHEDULE_KEY);\n    if (!data) {\n        localStorage.setItem(SCHEDULE_KEY, JSON.stringify(initialSchedule));\n        return initialSchedule;\n    }\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        console.error(\"Ошибка парсинга schedule из localStorage\", e);\n        return [];\n    }\n}\n\n// Добавляем новое событие\nexport function createScheduleEvent(eventData) {\n    const all = getAllSchedule();\n    const newId = String(Date.now());\n    const newEvent = { id: newId, ...eventData };\n    all.push(newEvent);\n    saveSchedule(all);\n    return newEvent;\n}\n\n// Удаляем событие\nexport function deleteScheduleEvent(id) {\n    let all = getAllSchedule();\n    all = all.filter((item) => item.id !== id);\n    saveSchedule(all);\n}\n\n// Можно сделать updateScheduleEvent, если понадобится\n","import React from 'react';\nimport { Button, Card, Col, Typography } from 'antd';\nimport './Card.scss';\n\nconst { Title, Text } = Typography;\n\nconst DashboardCard = ({ title, value, extra, link, linkText }) => (\n    <Col span={8}>\n        <Card className=\"dashboard-card\">\n            <Title level={4}>{title}</Title>\n            <Text className=\"dashboard-card-value\">{value}</Text>\n            {link && (\n                <div className=\"dashboard-card-link\">\n                    <Button type=\"primary\"  href={link}>{linkText}</Button>\n                </div>\n            )}\n        </Card>\n    </Col>\n);\n\nexport default DashboardCard;\n","// /entities/news/model/newsStorage.js\n\nimport img from \"../../../assets/img/matem.jpg\";\n\nconst NEWS_KEY = \"news\";\n\n/**\n * Начальные данные (моки).\n * Если в localStorage нет сохранённых новостей,\n * они будут записаны при первом обращении к getAllNews().\n */\nconst initialNews = [\n    {\n        id: \"1\",\n        author: \"Учитель Иванов\",\n        role: \"teacher\",\n        title: \"Новая методика по математике\",\n        content: \"Учимся решать задачи интересным способом...\",\n        createdAt: \"2023-03-10T09:00:00.000Z\",\n        image: img,\n    },\n    {\n        id: \"2\",\n        author: \"Admin\",\n        role: \"teacher\",\n        title: \"Школьный праздник\",\n        content: \"Приглашаем всех на день открытых дверей...\",\n        createdAt: \"2023-03-15T15:30:00.000Z\",\n        image: \"\",\n    },\n];\n\n/**\n * Функция сохраняет список новостей в localStorage по ключу NEWS_KEY.\n * @param {Array} list - массив новостей\n */\nfunction saveNewsList(list) {\n    localStorage.setItem(NEWS_KEY, JSON.stringify(list));\n}\n\n/**\n * Получить все новости из localStorage.\n * Если там ничего нет, используется массив initialNews,\n * который записывается в localStorage и затем возвращается.\n * @returns {Array} список новостей\n */\nexport function getAllNews() {\n    const data = localStorage.getItem(NEWS_KEY);\n    if (!data) {\n        saveNewsList(initialNews);\n        return initialNews;\n    }\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        console.error(\"Ошибка парсинга news из localStorage\", e);\n        return [];\n    }\n}\n\n/**\n * Создать новость и сохранить в localStorage.\n * @param {Object} newsData - данные новости\n * @returns {Object} созданная новость (с присвоенным id)\n */\nexport function createNews(newsData) {\n    const list = getAllNews();\n    const newId = String(Date.now()); // простое уникальное значение\n    const newPost = {\n        id: newId,\n        ...newsData,\n    };\n    // Добавим новость в начало списка:\n    list.unshift(newPost);\n    saveNewsList(list);\n    return newPost;\n}\n\n/**\n * Обновить существующую новость.\n * @param {string} id - идентификатор новости\n * @param {Object} updates - поля, которые нужно изменить\n * @returns {Object|null} обновлённая новость или null, если не найдена\n */\nexport function updateNews(id, updates) {\n    const list = getAllNews();\n    const index = list.findIndex((item) => item.id === id);\n    if (index === -1) {\n        console.warn(`Новость с id=${id} не найдена`);\n        return null;\n    }\n    list[index] = { ...list[index], ...updates };\n    saveNewsList(list);\n    return list[index];\n}\n\n/**\n * Удалить новость по её id.\n * @param {string} id - идентификатор новости\n */\nexport function deleteNews(id) {\n    let list = getAllNews();\n    list = list.filter((item) => item.id !== id);\n    saveNewsList(list);\n}\n","// utils.js\nexport const getBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = (error) => reject(error);\n    });\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Card, Modal, Form, Input, notification, Upload } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { getSession } from \"../../../features/auth/model/session\";\nimport {\n    getAllNews,\n    createNews,\n    updateNews,\n    deleteNews,\n} from \"../../../entities/news/model/newsStorage\";\n\nimport \"./NewsPage.scss\";\nimport { getBase64 } from \"./utils\";\n\nexport const NewsPage = () => {\n    const user = getSession(); // { login, role, fullName, ... }\n    const [newsList, setNewsList] = useState([]);\n    const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n    const [createForm] = Form.useForm();\n    const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n    const [editForm] = Form.useForm();\n    const [editingNewsId, setEditingNewsId] = useState(null);\n\n    useEffect(() => {\n        const list = getAllNews();\n        setNewsList(list);\n    }, []);\n\n    // ОТКРЫТЬ/ЗАКРЫТЬ создание\n    const openCreateModal = () => {\n        setIsCreateModalOpen(true);\n        createForm.resetFields();\n    };\n\n    const handleCancelCreate = () => {\n        setIsCreateModalOpen(false);\n        createForm.resetFields();\n    };\n\n    // ОТКРЫТЬ/ЗАКРЫТЬ редактирование\n    const openEditModal = (post) => {\n        setEditingNewsId(post.id);\n        setIsEditModalOpen(true);\n\n        // Подставляем начальные значения в форму\n        editForm.setFieldsValue({\n            title: post.title,\n            content: post.content,\n            // Для Upload нужно сформировать массив fileList\n            image: post.image\n                ? [\n                    {\n                        uid: \"-1\",\n                        name: \"news-image\",\n                        status: \"done\",\n                        url: post.image, // base64 либо какая-то ссылка\n                    },\n                ]\n                : [],\n        });\n    };\n\n    const handleCancelEdit = () => {\n        setIsEditModalOpen(false);\n        setEditingNewsId(null);\n        editForm.resetFields();\n    };\n\n    // -------------------------------\n    // СОЗДАНИЕ\n    // -------------------------------\n    // Вызывается при сабмите формы \"Создать\"\n    const handleCreateFinish = async (values) => {\n        try {\n            // Получим Base64-изображение из Upload (если загружено)\n            let imageBase64 = \"\";\n            if (values.image && values.image.length > 0) {\n                const fileObj = values.image[0].originFileObj;\n                imageBase64 = await getBase64(fileObj);\n            }\n\n            const newPost = createNews({\n                author: user.fullName || user.login,\n                role: user.role,\n                title: values.title,\n                content: values.content,\n                createdAt: new Date().toISOString(),\n                image: imageBase64,\n            });\n            setNewsList((prev) => [newPost, ...prev]);\n            notification.success({ message: \"Новость опубликована!\" });\n            handleCancelCreate();\n        } catch (error) {\n            notification.error({ message: \"Ошибка при создании новости\" });\n            console.error(error);\n        }\n    };\n\n    // -------------------------------\n    // РЕДАКТИРОВАНИЕ\n    // -------------------------------\n    // Вызывается при сабмите формы \"Редактировать\"\n    const handleEditFinish = async (values) => {\n        try {\n            let imageBase64 = \"\";\n            if (values.image && values.image.length > 0) {\n                const fileObj = values.image[0].originFileObj;\n                imageBase64 = await getBase64(fileObj);\n            }\n\n            const updated = updateNews(editingNewsId, {\n                title: values.title,\n                content: values.content,\n                image: imageBase64,\n            });\n            setNewsList((prev) =>\n                prev.map((item) => (item.id === editingNewsId ? updated : item))\n            );\n            notification.success({ message: \"Новость отредактирована!\" });\n            handleCancelEdit();\n        } catch (error) {\n            notification.error({ message: \"Ошибка при редактировании новости\" });\n            console.error(error);\n        }\n    };\n\n    // -------------------------------\n    // УДАЛЕНИЕ\n    // -------------------------------\n    const handleDelete = (postId) => {\n        try {\n            deleteNews(postId);\n            setNewsList((prev) => prev.filter((item) => item.id !== postId));\n            notification.success({ message: \"Новость удалена!\" });\n        } catch (error) {\n            notification.error({ message: \"Ошибка при удалении новости\" });\n            console.error(error);\n        }\n    };\n\n    // Функция для удобного преобразования Upload-события в нужный формат\n    const normFile = (e) => {\n        if (Array.isArray(e)) {\n            return e;\n        }\n        return e?.fileList;\n    };\n\n    return (\n        <div className=\"newsContainer\">\n            <h2>Новости</h2>\n\n            {user?.role === \"teacher\" && (\n                <Button type=\"primary\" style={{ marginBottom: 16 }} onClick={openCreateModal}>\n                    Создать новость\n                </Button>\n            )}\n\n            <div className=\"newsList\">\n                {newsList.map((post) => (\n                    <div className=\"newsCard\" key={post.id}>\n                        <Card>\n                            <div className=\"newsMeta content\">\n                                Автор: <b>{post.author}</b> |{\" \"}\n                                {new Date(post.createdAt).toLocaleString()}\n                            </div>\n                            {post.image && (\n                                <div>\n                                    <img src={post.image} alt=\"изображение новости\" className=\"newsImage\"/>\n                                </div>\n                            )}\n\n                            <div className=\"content\">\n\n                                <div className=\"newsTitle\">{post.title}</div>\n                                <div className=\"newsContent\">{post.content}</div>\n\n                                {user?.role === \"teacher\" && (\n                                    <div style={{textAlign: \"right\", marginTop: 8}}>\n                                        <Button\n                                            type=\"link\"\n                                            onClick={() => openEditModal(post)}\n                                            style={{marginRight: 8}}\n                                        >\n                                            Редактировать\n                                        </Button>\n                                        <Button danger type=\"link\" onClick={() => handleDelete(post.id)}>\n                                            Удалить\n                                        </Button>\n                                    </div>\n                                )}\n                            </div>\n                        </Card>\n                    </div>\n                ))}\n            </div>\n\n            {/* Модалка: Создание */}\n            <Modal\n                title=\"Создать новость\"\n                open={isCreateModalOpen}\n                onCancel={handleCancelCreate}\n                onOk={() => createForm.submit()}\n            >\n                <Form\n                    form={createForm}\n                    layout=\"vertical\"\n                    onFinish={handleCreateFinish}\n                    name=\"createNewsForm\"\n                >\n                    <Form.Item\n                        label=\"Заголовок\"\n                        name=\"title\"\n                        rules={[{ required: true, message: \"Введите заголовок новости\" }]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Содержание\"\n                        name=\"content\"\n                        rules={[{ required: true, message: \"Введите текст новости\" }]}\n                    >\n                        <Input.TextArea rows={4} />\n                    </Form.Item>\n\n                    {/* Поле для загрузки картинки */}\n                    <Form.Item\n                        label=\"Фото (одно)\"\n                        name=\"image\"\n                        valuePropName=\"fileList\"\n                        getValueFromEvent={normFile}\n                    >\n                        <Upload\n                            listType=\"picture-card\"\n                            maxCount={1}\n                            beforeUpload={() => false} // чтобы не отправляло файл на сервер автоматически\n                        >\n                            <div>\n                                <PlusOutlined />\n                                <div style={{ marginTop: 8 }}>Загрузить</div>\n                            </div>\n                        </Upload>\n                    </Form.Item>\n                </Form>\n            </Modal>\n\n            {/* Модалка: Редактирование */}\n            <Modal\n                title=\"Редактировать новость\"\n                open={isEditModalOpen}\n                onCancel={handleCancelEdit}\n                onOk={() => editForm.submit()}\n            >\n                <Form\n                    form={editForm}\n                    layout=\"vertical\"\n                    onFinish={handleEditFinish}\n                    name=\"editNewsForm\"\n                >\n                    <Form.Item\n                        label=\"Заголовок\"\n                        name=\"title\"\n                        rules={[{ required: true, message: \"Введите заголовок новости\" }]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Содержание\"\n                        name=\"content\"\n                        rules={[{ required: true, message: \"Введите текст новости\" }]}\n                    >\n                        <Input.TextArea rows={4} />\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Фото (одно)\"\n                        name=\"image\"\n                        valuePropName=\"fileList\"\n                        getValueFromEvent={normFile}\n                    >\n                        <Upload\n                            listType=\"picture-card\"\n                            maxCount={1}\n                            beforeUpload={() => false}\n                        >\n                            <div>\n                                <PlusOutlined />\n                                <div style={{ marginTop: 8 }}>Загрузить</div>\n                            </div>\n                        </Upload>\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </div>\n    );\n};\n","// pages/DashboardPage/ui/DashboardPage.jsx\nimport React, { useEffect, useState } from \"react\";\nimport { Card, Row, Col, Typography, Button } from \"antd\";\nimport { getSession } from \"../../../features/auth/model/session\";\nimport { getAllCourses } from \"../../../entities/course/model/courseStorage\";\nimport { getAllSchedule } from \"../../../entities/schedule/model/scheduleStorage\";\nimport DashboardCard from \"../../../shared/ui/Card/Card\";\nimport {NewsPage} from \"../../NewsPage/ui/NewsPage\";\n\nconst { Title, Text } = Typography;\n\nexport const DashboardPage = () => {\n    const [user, setUser] = useState(null);\n    const [courses, setCourses] = useState([]);\n    const [schedule, setSchedule] = useState([]);\n    const [closestEvent, setClosestEvent] = useState(null);\n\n    useEffect(() => {\n        const sessionUser = getSession();\n        if (sessionUser) {\n            setUser(sessionUser);\n        }\n\n        // Загрузим все курсы\n        const courseData = getAllCourses();\n        setCourses(courseData);\n\n        // Загрузим все события расписания\n        const scheduleData = getAllSchedule();\n        setSchedule(scheduleData);\n\n        // Найдём ближайшее событие (по дате/времени)\n        if (scheduleData.length > 0) {\n            const now = new Date();\n\n            // Преобразуем \"date\" + \"time\" в Date-объект\n            // и найдём самое ближайшее, которое еще не прошло\n            const upcomingEvents = scheduleData\n                .map((ev) => {\n                    const [year, month, day] = ev.date.split(\"-\");\n                    const [hours, minutes] = ev.time.split(\":\");\n                    const eventDate = new Date(\n                        +year,\n                        +month - 1, // месяцы в JS с 0\n                        +day,\n                        +hours,\n                        +minutes\n                    );\n                    return { ...ev, eventDate };\n                })\n                .filter((ev) => ev.eventDate > now)\n                .sort((a, b) => a.eventDate - b.eventDate);\n\n            if (upcomingEvents.length > 0) {\n                setClosestEvent(upcomingEvents[0]);\n            }\n        }\n    }, []);\n\n    // Подсчитаем, сколько курсов ведёт преподаватель (teacher) и т.д.\n\n\n    return (\n        <div style={{ padding: \"16px\" }}>\n            <Title level={2}>Добро пожаловать, {user?.fullName}!</Title>\n            <Text>\n                Ваша роль: <b>{user?.role === \"teacher\" ? \"Преподаватель\" : \"Студент\"}</b>\n            </Text>\n\n            <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\n                <DashboardCard\n                    title=\"Всего курсов:\"\n                    value={courses.length}\n                    link=\"#/courses\"\n                    linkText=\"Перейти к курсам\"\n                />\n                <DashboardCard\n                    title=\"Расписание:\"\n                    value={`${schedule.length} занятий`}\n                    extra={closestEvent ? (\n                        <div>\n                            <Text type=\"secondary\">Ближайшее занятие:</Text>\n                            <div>\n                                <Text>{closestEvent.date} в {closestEvent.time}, курс ID {closestEvent.courseId}</Text>\n                            </div>\n                        </div>\n                    ) : (\n                        <Text type=\"secondary\">Ближайших занятий не найдено.</Text>\n                    )}\n                    link=\"#/schedule\"\n                    linkText=\"Посмотреть расписание\"\n                />\n\n                {/*<DashboardCard*/}\n                {/*    title=\"Материалы\"*/}\n                {/*    value=\"Здесь можно показать количество материалов и т.д.\"*/}\n                {/*    link=\"#/teacher-zone\"*/}\n                {/*    linkText=\"Управлять материалами (Teacher Zone)\"*/}\n                {/*/>*/}\n            </Row>\n            <NewsPage />\n        </div>\n    );\n};\n"],"names":["SCHEDULE_KEY","initialSchedule","id","courseId","date","time","room","saveSchedule","scheduleList","localStorage","setItem","JSON","stringify","getAllSchedule","data","getItem","parse","e","console","error","createScheduleEvent","eventData","all","newId","String","Date","now","newEvent","_objectSpread","push","deleteScheduleEvent","filter","item","Title","Text","Typography","_ref","title","value","extra","link","linkText","_jsx","Col","span","children","_jsxs","Card","className","level","Button","type","href","NEWS_KEY","initialNews","author","role","content","createdAt","image","img","saveNewsList","list","getAllNews","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","NewsPage","user","getSession","newsList","setNewsList","useState","isCreateModalOpen","setIsCreateModalOpen","createForm","Form","useForm","isEditModalOpen","setIsEditModalOpen","editForm","editingNewsId","setEditingNewsId","useEffect","handleCancelCreate","resetFields","handleCancelEdit","handleDelete","postId","deleteNews","prev","notification","success","message","normFile","Array","isArray","fileList","style","marginBottom","onClick","openCreateModal","map","post","toLocaleString","src","alt","textAlign","marginTop","setFieldsValue","uid","name","status","url","openEditModal","marginRight","danger","Modal","open","onCancel","onOk","submit","form","layout","onFinish","async","imageBase64","values","length","fileObj","originFileObj","newPost","newsData","unshift","createNews","fullName","login","toISOString","Item","label","rules","required","Input","TextArea","rows","valuePropName","getValueFromEvent","Upload","listType","maxCount","beforeUpload","PlusOutlined","updated","updates","index","findIndex","warn","concat","updateNews","DashboardPage","setUser","courses","setCourses","schedule","setSchedule","closestEvent","setClosestEvent","sessionUser","courseData","getAllCourses","scheduleData","upcomingEvents","ev","year","month","day","split","hours","minutes","eventDate","sort","a","b","padding","Row","gutter","DashboardCard"],"sourceRoot":""}