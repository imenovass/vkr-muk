{"version":3,"file":"static/js/834.891bb6cb.chunk.js","mappings":"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","sources":["entities/course/model/courseStorage.js","entities/material/model/materialStorage.js","pages/TeacherZonePage/ui/TeacherZonePage.jsx"],"sourcesContent":["// entities/course/model/courseStorage.js\n\nconst STORAGE_KEY = \"courses\";\n\n// Стартовый (mock) список курсов (можно загрузить при первом запуске)\nconst initialCourses = [\n    {\n        id: \"1\",\n        title: \"Математика\",\n        description: \"Базовый курс по математике\",\n        teacherId: \"teacher\", // условно привяжем к логину преподавателя\n    },\n    {\n        id: \"2\",\n        title: \"Физика\",\n        description: \"Введение в механику\",\n        teacherId: \"teacher\",\n    },\n];\n\n// Функция получения списка из localStorage\nexport function getAllCourses() {\n    const data = localStorage.getItem(STORAGE_KEY);\n    if (!data) {\n        // Если ничего нет в localStorage, записываем initialCourses\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(initialCourses));\n        return initialCourses;\n    }\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        console.error(\"Ошибка парсинга курсов из localStorage\", e);\n        return [];\n    }\n}\n\n// Функция поиска курса по id\nexport function getCourseById(id) {\n    const courses = getAllCourses();\n    return courses.find((c) => c.id === id) || null;\n}\n\n// Сохранить весь массив курсов\nfunction saveAllCourses(courses) {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(courses));\n}\n\n// Создать новый курс\nexport function createCourse(courseData) {\n    const courses = getAllCourses();\n    // Генерация условного ID\n    const newId = String(Date.now());\n    const newCourse = { id: newId, ...courseData };\n    courses.push(newCourse);\n    saveAllCourses(courses);\n    return newCourse;\n}\n\n// Обновить существующий курс\nexport function updateCourse(id, updates) {\n    const courses = getAllCourses();\n    const index = courses.findIndex((c) => c.id === id);\n    if (index === -1) return null;\n\n    courses[index] = { ...courses[index], ...updates };\n    saveAllCourses(courses);\n    return courses[index];\n}\n\n// Удалить курс\nexport function deleteCourse(id) {\n    let courses = getAllCourses();\n    courses = courses.filter((c) => c.id !== id);\n    saveAllCourses(courses);\n}\n","// entities/material/model/materialStorage.js\n\nconst MATERIALS_KEY = \"materials\";\n\n// Для демонстрации — пара стартовых материалов\nconst initialMaterials = [\n    {\n        id: \"1\",\n        courseId: \"1\",       // курс \"Математика\"\n        title: \"Лекции по алгебре (PDF)\",\n        link: \"https://example.com/algebra.pdf\"\n    },\n    {\n        id: \"2\",\n        courseId: \"2\",       // курс \"Физика\"\n        title: \"Презентация по кинематике\",\n        link: \"https://example.com/kinematics.ppt\"\n    }\n];\n\nfunction saveAllMaterials(list) {\n    localStorage.setItem(MATERIALS_KEY, JSON.stringify(list));\n}\n\nexport function getAllMaterials() {\n    const data = localStorage.getItem(MATERIALS_KEY);\n    if (!data) {\n        localStorage.setItem(MATERIALS_KEY, JSON.stringify(initialMaterials));\n        return initialMaterials;\n    }\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        console.error(\"Ошибка парсинга materials\", e);\n        return [];\n    }\n}\n\nexport function createMaterial(materialData) {\n    const list = getAllMaterials();\n    const newId = String(Date.now());\n    const newMat = { id: newId, ...materialData };\n    list.push(newMat);\n    saveAllMaterials(list);\n    return newMat;\n}\n\nexport function deleteMaterial(id) {\n    let list = getAllMaterials();\n    list = list.filter((item) => item.id !== id);\n    saveAllMaterials(list);\n}\n\nexport function getMaterialsByCourse(courseId) {\n    const list = getAllMaterials();\n    return list.filter((item) => item.courseId === courseId);\n}\n","// pages/TeacherZonePage/ui/TeacherZonePage.jsx\nimport React, { useEffect, useState } from \"react\";\nimport { Table, Button, Modal, Form, Input, Select } from \"antd\";\nimport { getSession } from \"../../../features/auth/model/session\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { getAllCourses } from \"../../../entities/course/model/courseStorage\";\nimport {\n    getAllMaterials,\n    createMaterial,\n    deleteMaterial,\n} from \"../../../entities/material/model/materialStorage\";\n\nconst { Option } = Select;\n\nexport const TeacherZonePage = () => {\n    const sessionUser = getSession();\n    const navigate = useNavigate();\n\n    // Если пользователь не teacher, перенаправим на главную\n    useEffect(() => {\n        if (!sessionUser || sessionUser.role !== \"teacher\") {\n            navigate(\"/\");\n        }\n    }, [sessionUser, navigate]);\n\n    const [materials, setMaterials] = useState([]);\n    const [courses, setCourses] = useState([]);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [form] = Form.useForm();\n\n    useEffect(() => {\n        // Загрузим все материалы и курсы\n        const mat = getAllMaterials();\n        setMaterials(mat);\n\n        const c = getAllCourses();\n        setCourses(c);\n    }, []);\n\n    const columns = [\n        {\n            title: \"Название\",\n            dataIndex: \"title\",\n            key: \"title\",\n        },\n        {\n            title: \"Ссылка\",\n            dataIndex: \"link\",\n            key: \"link\",\n            render: (text) => (\n                <a href={text} target=\"_blank\" rel=\"noreferrer\">\n                    {text}\n                </a>\n            ),\n        },\n        {\n            title: \"ID курса\",\n            dataIndex: \"courseId\",\n            key: \"courseId\",\n        },\n        {\n            title: \"Действия\",\n            key: \"actions\",\n            render: (text, record) => (\n                <Button danger onClick={() => handleDelete(record.id)}>\n                    Удалить\n                </Button>\n            ),\n        },\n    ];\n\n    const handleDelete = (id) => {\n        deleteMaterial(id);\n        setMaterials((prev) => prev.filter((m) => m.id !== id));\n    };\n\n    // Открыть модал для добавления материала\n    const openModal = () => {\n        setIsModalOpen(true);\n    };\n\n    // Закрыть\n    const closeModal = () => {\n        setIsModalOpen(false);\n        form.resetFields();\n    };\n\n    // Сохранить\n    const handleSave = () => {\n        form.validateFields().then((values) => {\n            const { title, link, courseId } = values;\n            createMaterial({ title, link, courseId });\n            setMaterials(getAllMaterials());\n            closeModal();\n        });\n    };\n\n    return (\n        <div>\n            <h2>Teacher Zone: Управление материалами</h2>\n            <Button type=\"primary\" onClick={openModal} style={{ marginBottom: 16 }}>\n                Добавить материал\n            </Button>\n\n            <Table columns={columns} dataSource={materials} rowKey=\"id\" />\n\n            <Modal\n                title=\"Добавить материал\"\n                visible={isModalOpen}\n                onCancel={closeModal}\n                onOk={handleSave}\n            >\n                <Form form={form} layout=\"vertical\">\n                    <Form.Item\n                        label=\"Название\"\n                        name=\"title\"\n                        rules={[{ required: true, message: \"Введите название\" }]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Ссылка\"\n                        name=\"link\"\n                        rules={[{ required: true, message: \"Введите ссылку\" }]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Курс\"\n                        name=\"courseId\"\n                        rules={[{ required: true, message: \"Выберите курс\" }]}\n                    >\n                        <Select placeholder=\"Выберите курс\">\n                            {courses.map((c) => (\n                                <Option key={c.id} value={c.id}>\n                                    {c.title} (ID {c.id})\n                                </Option>\n                            ))}\n                        </Select>\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </div>\n    );\n};\n"],"names":["STORAGE_KEY","initialCourses","id","title","description","teacherId","getAllCourses","data","localStorage","getItem","setItem","JSON","stringify","parse","e","console","error","getCourseById","find","c","saveAllCourses","courses","createCourse","courseData","newId","String","Date","now","newCourse","_objectSpread","push","updateCourse","updates","index","findIndex","deleteCourse","filter","MATERIALS_KEY","initialMaterials","courseId","link","saveAllMaterials","list","getAllMaterials","Option","Select","TeacherZonePage","sessionUser","getSession","navigate","useNavigate","useEffect","role","materials","setMaterials","useState","setCourses","isModalOpen","setIsModalOpen","form","Form","useForm","mat","columns","dataIndex","key","render","text","_jsx","href","target","rel","children","record","Button","danger","onClick","handleDelete","item","deleteMaterial","prev","m","closeModal","resetFields","_jsxs","type","openModal","style","marginBottom","Table","dataSource","rowKey","Modal","visible","onCancel","onOk","handleSave","validateFields","then","values","materialData","newMat","createMaterial","layout","Item","label","name","rules","required","message","Input","placeholder","map","value"],"sourceRoot":""}