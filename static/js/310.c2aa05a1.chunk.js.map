{"version":3,"file":"static/js/310.c2aa05a1.chunk.js","mappings":"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","sources":["entities/schedule/model/scheduleStorage.js","shared/ui/Card/Card.jsx","entities/news/model/newsStorage.js","pages/NewsPage/ui/utils.js","pages/NewsPage/ui/NewsPage.jsx","pages/DashboardPage/ui/DashboardPage.jsx"],"sourcesContent":["// entities/schedule/model/scheduleStorage.js\n\nconst SCHEDULE_KEY = 'schedule'\n\n// Какие-то начальные данные (mock)\nconst initialSchedule = [\n  {\n    id: '101',\n    courseId: '1', // курс Математика\n    date: '2025-02-01', // YYYY-MM-DD\n    time: '10:00', // строка (HH:mm)\n    room: 'Аудитория 305',\n  },\n  {\n    id: '102',\n    courseId: '2', // курс Физика\n    date: '2025-02-02',\n    time: '12:30',\n    room: 'Лаборатория 2',\n  },\n]\n\nfunction saveSchedule(scheduleList) {\n  localStorage.setItem(SCHEDULE_KEY, JSON.stringify(scheduleList))\n}\n\n// Получаем все события расписания\nexport function getAllSchedule() {\n  const data = localStorage.getItem(SCHEDULE_KEY)\n  if (!data) {\n    localStorage.setItem(SCHEDULE_KEY, JSON.stringify(initialSchedule))\n    return initialSchedule\n  }\n  try {\n    return JSON.parse(data)\n  } catch (e) {\n    console.error('Ошибка парсинга schedule из localStorage', e)\n    return []\n  }\n}\n\n// Добавляем новое событие\nexport function createScheduleEvent(eventData) {\n  const all = getAllSchedule()\n  const newId = String(Date.now())\n  const newEvent = { id: newId, ...eventData }\n  all.push(newEvent)\n  saveSchedule(all)\n  return newEvent\n}\n\n// Удаляем событие\nexport function deleteScheduleEvent(id) {\n  let all = getAllSchedule()\n  all = all.filter((item) => item.id !== id)\n  saveSchedule(all)\n}\n\n// Можно сделать updateScheduleEvent, если понадобится\n","import React from 'react'\n\nimport { Button, Card, Col, Typography } from 'antd'\n\nimport './Card.scss'\n\nconst { Title, Text } = Typography\n\nconst DashboardCard = ({ title, value, extra, link, linkText }) => {\n  return (\n    // Указываем адаптивные размеры колонок:\n    // xs={24}  -> будет занимать всю ширину на экранах < 576px\n    // sm={12}  -> половину ширины от 576px до 768px\n    // md={8}   -> треть ширины от 768px и выше\n    <Col xs={24} sm={12} md={8}>\n      <Card className=\"dashboard-card\">\n        <Title level={4}>{title}</Title>\n        <Text className=\"dashboard-card-value\">{value}</Text>\n\n        {/* Блок для дополнительного контента */}\n        {extra && <div className=\"dashboard-card-extra\">{extra}</div>}\n\n        {link && (\n          <div className=\"dashboard-card-link\">\n            <Button type=\"primary\" href={link}>\n              {linkText}\n            </Button>\n          </div>\n        )}\n      </Card>\n    </Col>\n  )\n}\n\nexport default DashboardCard\n","// /entities/news/model/newsStorage.js\nimport img1 from '../../../assets/img/door.jpeg'\nimport img3 from '../../../assets/img/study.jpeg'\nimport img2 from '../../../assets/img/tree.jpeg'\n\nconst NEWS_KEY = 'news'\n\n/**\n * Начальные данные (моки).\n * Если в localStorage нет сохранённых новостей,\n * они будут записаны при первом обращении к getAllNews().\n */\nconst initialNews = [\n  {\n    id: '1',\n    author: 'Именова Севара',\n    role: 'student',\n    title: 'Наш университет — наша забота!',\n    content:\n      'Сегодня, в 10:30 утра, на территории нашего университета прошёл субботник. Студенты и преподаватели объединились, чтобы сделать кампус чище и уютнее. Убирали листья, красили лавочки, высаживали цветы — погода, настроение и результат порадовали всех участников!\\n' +\n      'Огромное спасибо каждому, кто не остался в стороне — такие мероприятия не только украшают наш университет, но и объединяют нас!',\n    createdAt: '2023-03-10T09:00:00.000Z',\n    image: img2,\n  },\n  {\n    id: '2',\n    author: 'Учитель',\n    role: 'teacher',\n    title: 'Скоро начнется экзаменационная неделя',\n    content:\n      'Друзья, совсем скоро стартует экзаменационная неделя — время собраться, повторить материал и показать всё, на что мы способны!\\n' +\n      'Не забывайте про режим сна, отдых и поддержку друг друга. Удачи всем — пусть билеты будут лёгкими, а оценки — высокими!',\n    createdAt: '2023-03-15T15:30:00.000Z',\n    image: img3,\n  },\n  {\n    id: '2',\n    author: 'Учитель',\n    role: 'teacher',\n    title: 'Приглашаем всех на день открытых дверей!',\n    content:\n      'Приходи на День открытых дверей и окунись в атмосферу университетской жизни!\\n' +\n      '\\n' +\n      '📌 Что тебя ждёт:\\n' +\n      '— Знакомство с факультетами и преподавателями\\n' +\n      '— Экскурсия по кампусу\\n' +\n      '— Ответы на все вопросы о поступлении\\n' +\n      '— Живое общение с нашими студентами\\n' +\n      '\\n' +\n      '📅 Когда: 20.06.2025\\n' +\n      '🕒 Во сколько:13:00\\n' +\n      '📍 Где: проспект Чуй, 255\\n' +\n      '\\n' +\n      'Не упусти шанс сделать шаг навстречу будущему! Ждём тебя — будет интересно',\n    createdAt: '2023-03-15T15:30:00.000Z',\n    image: img1,\n  },\n]\n\n/**\n * Функция сохраняет список новостей в localStorage по ключу NEWS_KEY.\n * @param {Array} list - массив новостей\n */\nfunction saveNewsList(list) {\n  localStorage.setItem(NEWS_KEY, JSON.stringify(list))\n}\n\n/**\n * Получить все новости из localStorage.\n * Если там ничего нет, используется массив initialNews,\n * который записывается в localStorage и затем возвращается.\n * @returns {Array} список новостей\n */\nexport function getAllNews() {\n  const data = localStorage.getItem(NEWS_KEY)\n  if (!data) {\n    saveNewsList(initialNews)\n    return initialNews\n  }\n  try {\n    return JSON.parse(data)\n  } catch (e) {\n    console.error('Ошибка парсинга news из localStorage', e)\n    return []\n  }\n}\n\n/**\n * Создать новость и сохранить в localStorage.\n * @param {Object} newsData - данные новости\n * @returns {Object} созданная новость (с присвоенным id)\n */\nexport function createNews(newsData) {\n  const list = getAllNews()\n  const newId = String(Date.now()) // простое уникальное значение\n  const newPost = {\n    id: newId,\n    ...newsData,\n  }\n  // Добавим новость в начало списка:\n  list.unshift(newPost)\n  saveNewsList(list)\n  return newPost\n}\n\n/**\n * Обновить существующую новость.\n * @param {string} id - идентификатор новости\n * @param {Object} updates - поля, которые нужно изменить\n * @returns {Object|null} обновлённая новость или null, если не найдена\n */\nexport function updateNews(id, updates) {\n  const list = getAllNews()\n  const index = list.findIndex((item) => item.id === id)\n  if (index === -1) {\n    console.warn(`Новость с id=${id} не найдена`)\n    return null\n  }\n  list[index] = { ...list[index], ...updates }\n  saveNewsList(list)\n  return list[index]\n}\n\n/**\n * Удалить новость по её id.\n * @param {string} id - идентификатор новости\n */\nexport function deleteNews(id) {\n  let list = getAllNews()\n  list = list.filter((item) => item.id !== id)\n  saveNewsList(list)\n}\n","// utils.js\nexport const getBase64 = (file) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.readAsDataURL(file)\n    reader.onload = () => resolve(reader.result)\n    reader.onerror = (error) => reject(error)\n  })\n}\n","import React, { useEffect, useState } from 'react'\n\nimport { PlusOutlined } from '@ant-design/icons'\nimport { Button, Card, Form, Input, Modal, Upload, notification } from 'antd'\n\nimport { createNews, deleteNews, getAllNews, updateNews } from '../../../entities/news/model/newsStorage'\nimport { getSession } from '../../../features/auth/model/session'\n\nimport './NewsPage.scss'\nimport { getBase64 } from './utils'\n\nexport const NewsPage = () => {\n  const user = getSession() // { login, role, fullName, ... }\n  const [newsList, setNewsList] = useState([])\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)\n  const [createForm] = Form.useForm()\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false)\n  const [editForm] = Form.useForm()\n  const [editingNewsId, setEditingNewsId] = useState(null)\n\n  useEffect(() => {\n    const list = getAllNews()\n    setNewsList(list)\n  }, [])\n\n  // ОТКРЫТЬ/ЗАКРЫТЬ создание\n  const openCreateModal = () => {\n    setIsCreateModalOpen(true)\n    createForm.resetFields()\n  }\n\n  const handleCancelCreate = () => {\n    setIsCreateModalOpen(false)\n    createForm.resetFields()\n  }\n\n  // ОТКРЫТЬ/ЗАКРЫТЬ редактирование\n  const openEditModal = (post) => {\n    setEditingNewsId(post.id)\n    setIsEditModalOpen(true)\n\n    // Подставляем начальные значения в форму\n    editForm.setFieldsValue({\n      title: post.title,\n      content: post.content,\n      // Для Upload нужно сформировать массив fileList\n      image: post.image\n        ? [\n            {\n              uid: '-1',\n              name: 'news-image',\n              status: 'done',\n              url: post.image, // base64 либо какая-то ссылка\n            },\n          ]\n        : [],\n    })\n  }\n\n  const handleCancelEdit = () => {\n    setIsEditModalOpen(false)\n    setEditingNewsId(null)\n    editForm.resetFields()\n  }\n\n  // -------------------------------\n  // СОЗДАНИЕ\n  // -------------------------------\n  // Вызывается при сабмите формы \"Создать\"\n  const handleCreateFinish = async (values) => {\n    try {\n      // Получим Base64-изображение из Upload (если загружено)\n      let imageBase64 = ''\n      if (values.image && values.image.length > 0) {\n        const fileObj = values.image[0].originFileObj\n        imageBase64 = await getBase64(fileObj)\n      }\n\n      const newPost = createNews({\n        author: user.fullName || user.login,\n        role: user.role,\n        title: values.title,\n        content: values.content,\n        createdAt: new Date().toISOString(),\n        image: imageBase64,\n      })\n      setNewsList((prev) => [newPost, ...prev])\n      notification.success({ message: 'Новость опубликована!' })\n      handleCancelCreate()\n    } catch (error) {\n      notification.error({ message: 'Ошибка при создании новости' })\n      console.error(error)\n    }\n  }\n\n  // -------------------------------\n  // РЕДАКТИРОВАНИЕ\n  // -------------------------------\n  // Вызывается при сабмите формы \"Редактировать\"\n  const handleEditFinish = async (values) => {\n    try {\n      let imageBase64 = ''\n      if (values.image && values.image.length > 0) {\n        const fileObj = values.image[0].originFileObj\n        imageBase64 = await getBase64(fileObj)\n      }\n\n      const updated = updateNews(editingNewsId, {\n        title: values.title,\n        content: values.content,\n        image: imageBase64,\n      })\n      setNewsList((prev) => prev.map((item) => (item.id === editingNewsId ? updated : item)))\n      notification.success({ message: 'Новость отредактирована!' })\n      handleCancelEdit()\n    } catch (error) {\n      notification.error({ message: 'Ошибка при редактировании новости' })\n      console.error(error)\n    }\n  }\n\n  // -------------------------------\n  // УДАЛЕНИЕ\n  // -------------------------------\n  const handleDelete = (postId) => {\n    try {\n      deleteNews(postId)\n      setNewsList((prev) => prev.filter((item) => item.id !== postId))\n      notification.success({ message: 'Новость удалена!' })\n    } catch (error) {\n      notification.error({ message: 'Ошибка при удалении новости' })\n      console.error(error)\n    }\n  }\n\n  // Функция для удобного преобразования Upload-события в нужный формат\n  const normFile = (e) => {\n    if (Array.isArray(e)) {\n      return e\n    }\n    return e?.fileList\n  }\n\n  return (\n    <div className=\"newsContainer\">\n      <h2>Новости</h2>\n\n      {user?.role === 'teacher' && (\n        <Button type=\"primary\" style={{ marginBottom: 16 }} onClick={openCreateModal}>\n          Создать новость\n        </Button>\n      )}\n\n      <div className=\"newsList\">\n        {newsList.map((post) => (\n          <div className=\"newsCard\" key={post.id}>\n            <Card>\n              <div className=\"newsMeta content\">\n                Автор: <b>{post.author}</b> | {new Date(post.createdAt).toLocaleString()}\n              </div>\n              {post.image && (\n                <div>\n                  <img src={post.image} alt=\"изображение новости\" className=\"newsImage\" />\n                </div>\n              )}\n\n              <div className=\"content\">\n                <div className=\"newsTitle\">{post.title}</div>\n                <div className=\"newsContent\">{post.content}</div>\n\n                {user?.role === 'teacher' && (\n                  <div style={{ textAlign: 'right', marginTop: 8 }}>\n                    <Button type=\"link\" onClick={() => openEditModal(post)} style={{ marginRight: 8 }}>\n                      Редактировать\n                    </Button>\n                    <Button danger type=\"link\" onClick={() => handleDelete(post.id)}>\n                      Удалить\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </Card>\n          </div>\n        ))}\n      </div>\n\n      {/* Модалка: Создание */}\n      <Modal\n        title=\"Создать новость\"\n        open={isCreateModalOpen}\n        onCancel={handleCancelCreate}\n        onOk={() => createForm.submit()}\n      >\n        <Form form={createForm} layout=\"vertical\" onFinish={handleCreateFinish} name=\"createNewsForm\">\n          <Form.Item label=\"Заголовок\" name=\"title\" rules={[{ required: true, message: 'Введите заголовок новости' }]}>\n            <Input />\n          </Form.Item>\n          <Form.Item label=\"Содержание\" name=\"content\" rules={[{ required: true, message: 'Введите текст новости' }]}>\n            <Input.TextArea rows={4} />\n          </Form.Item>\n\n          {/* Поле для загрузки картинки */}\n          <Form.Item label=\"Фото (одно)\" name=\"image\" valuePropName=\"fileList\" getValueFromEvent={normFile}>\n            <Upload\n              listType=\"picture-card\"\n              maxCount={1}\n              beforeUpload={() => false} // чтобы не отправляло файл на сервер автоматически\n            >\n              <div>\n                <PlusOutlined />\n                <div style={{ marginTop: 8 }}>Загрузить</div>\n              </div>\n            </Upload>\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Модалка: Редактирование */}\n      <Modal\n        title=\"Редактировать новость\"\n        open={isEditModalOpen}\n        onCancel={handleCancelEdit}\n        onOk={() => editForm.submit()}\n      >\n        <Form form={editForm} layout=\"vertical\" onFinish={handleEditFinish} name=\"editNewsForm\">\n          <Form.Item label=\"Заголовок\" name=\"title\" rules={[{ required: true, message: 'Введите заголовок новости' }]}>\n            <Input />\n          </Form.Item>\n          <Form.Item label=\"Содержание\" name=\"content\" rules={[{ required: true, message: 'Введите текст новости' }]}>\n            <Input.TextArea rows={4} />\n          </Form.Item>\n\n          <Form.Item label=\"Фото (одно)\" name=\"image\" valuePropName=\"fileList\" getValueFromEvent={normFile}>\n            <Upload listType=\"picture-card\" maxCount={1} beforeUpload={() => false}>\n              <div>\n                <PlusOutlined />\n                <div style={{ marginTop: 8 }}>Загрузить</div>\n              </div>\n            </Upload>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  )\n}\n","// pages/DashboardPage/ui/DashboardPage.jsx\nimport React, { useEffect, useState } from 'react'\n\nimport { Row, Typography } from 'antd'\n\nimport { getAllCourses } from '../../../entities/course/model/courseStorage'\nimport { getAllSchedule } from '../../../entities/schedule/model/scheduleStorage'\nimport { getSession } from '../../../features/auth/model/session'\nimport DashboardCard from '../../../shared/ui/Card/Card'\nimport { NewsPage } from '../../NewsPage/ui/NewsPage'\n\nconst { Title, Text } = Typography\n\nexport const DashboardPage = () => {\n  const [user, setUser] = useState(null)\n  const [courses, setCourses] = useState([])\n  const [schedule, setSchedule] = useState([])\n  const [closestEvent, setClosestEvent] = useState(null)\n\n  useEffect(() => {\n    const sessionUser = getSession()\n    if (sessionUser) {\n      setUser(sessionUser)\n    }\n\n    // Загрузим все курсы\n    const courseData = getAllCourses()\n    setCourses(courseData)\n\n    // Загрузим все события расписания\n    const scheduleData = getAllSchedule()\n    setSchedule(scheduleData)\n\n    // Найдём ближайшее событие (по дате/времени)\n    if (scheduleData.length > 0) {\n      const now = new Date()\n\n      // Преобразуем \"date\" + \"time\" в Date-объект\n      // и найдём самое ближайшее, которое еще не прошло\n      const upcomingEvents = scheduleData\n        .map((ev) => {\n          const [year, month, day] = ev.date.split('-')\n          const [hours, minutes] = ev.time.split(':')\n          const eventDate = new Date(\n            +year,\n            +month - 1, // месяцы в JS с 0\n            +day,\n            +hours,\n            +minutes,\n          )\n          return { ...ev, eventDate }\n        })\n        .filter((ev) => ev.eventDate > now)\n        .sort((a, b) => a.eventDate - b.eventDate)\n\n      if (upcomingEvents.length > 0) {\n        setClosestEvent(upcomingEvents[0])\n      }\n    }\n  }, [])\n\n  return (\n    <div style={{ padding: '16px' }}>\n      <Title level={2}>Добро пожаловать {user?.username}!</Title>\n      <Text>\n        Ваша роль: <b>{user?.role === 'teacher' ? 'Преподаватель' : 'Студент'}</b>\n      </Text>\n\n      <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\n        <DashboardCard title=\"Всего курсов:\" value={courses.length} link=\"#/courses\" linkText=\"Перейти к курсам\" />\n        <DashboardCard\n          title=\"Расписание:\"\n          value={`${schedule.length} занятий`}\n          extra={\n            closestEvent ? (\n              <div>\n                <Text type=\"secondary\">Ближайшее занятие:</Text>\n                <div>\n                  <Text>\n                    {closestEvent.date} в {closestEvent.time}, курс ID {closestEvent.courseId}\n                  </Text>\n                </div>\n              </div>\n            ) : (\n              <Text type=\"secondary\">Ближайших занятий не найдено.</Text>\n            )\n          }\n          link=\"#/schedule\"\n          linkText=\"Посмотреть расписание\"\n        />\n      </Row>\n      <NewsPage />\n    </div>\n  )\n}\n"],"names":["SCHEDULE_KEY","initialSchedule","id","courseId","date","time","room","saveSchedule","scheduleList","localStorage","setItem","JSON","stringify","getAllSchedule","data","getItem","parse","e","console","error","createScheduleEvent","eventData","all","newId","String","Date","now","newEvent","_objectSpread","push","deleteScheduleEvent","filter","item","Title","Text","Typography","_ref","title","value","extra","link","linkText","_jsx","Col","xs","sm","md","children","_jsxs","Card","className","level","Button","type","href","NEWS_KEY","initialNews","author","role","content","createdAt","image","img2","img3","img1","saveNewsList","list","getAllNews","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","NewsPage","user","getSession","newsList","setNewsList","useState","isCreateModalOpen","setIsCreateModalOpen","createForm","Form","useForm","isEditModalOpen","setIsEditModalOpen","editForm","editingNewsId","setEditingNewsId","useEffect","handleCancelCreate","resetFields","handleCancelEdit","handleDelete","postId","deleteNews","prev","notification","success","message","normFile","Array","isArray","fileList","style","marginBottom","onClick","openCreateModal","map","post","toLocaleString","src","alt","textAlign","marginTop","setFieldsValue","uid","name","status","url","openEditModal","marginRight","danger","Modal","open","onCancel","onOk","submit","form","layout","onFinish","async","imageBase64","values","length","fileObj","originFileObj","newPost","newsData","unshift","createNews","fullName","login","toISOString","Item","label","rules","required","Input","TextArea","rows","valuePropName","getValueFromEvent","Upload","listType","maxCount","beforeUpload","PlusOutlined","updated","updates","index","findIndex","warn","concat","updateNews","DashboardPage","setUser","courses","setCourses","schedule","setSchedule","closestEvent","setClosestEvent","sessionUser","courseData","getAllCourses","scheduleData","upcomingEvents","ev","year","month","day","split","hours","minutes","eventDate","sort","a","b","padding","username","Row","gutter","DashboardCard"],"sourceRoot":""}