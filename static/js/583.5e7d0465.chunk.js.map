{"version":3,"file":"static/js/583.5e7d0465.chunk.js","mappings":"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","sources":["pages/CoursesPage/ui/CoursesPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n    Row,\n    Col,\n    Card,\n    Button,\n    Modal,\n    Form,\n    Input,\n    notification,\n} from \"antd\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getSession } from \"../../../features/auth/model/session\";\nimport {\n    getAllCourses,\n    createCourse,\n    updateCourse,\n    saveAllCourses\n} from \"../../../entities/course/model/courseStorage\";\n\nexport const CoursesPage = () => {\n    const navigate = useNavigate();\n    const user = getSession();\n    const [courses, setCourses] = useState([]);\n\n    const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n    const [createForm] = Form.useForm();\n\n    useEffect(() => {\n        // 1. Считываем курсы из localStorage\n        let data = getAllCourses();\n\n        // 2. Проверяем, есть ли курс \"Физика\" (id=2)\n        const hasDefault = data.some((c) => c.id === \"2\");\n\n        if (!hasDefault) {\n            // 3. Если нет, добавляем\n            const defaultCourse = {\n                id: \"2\",\n                title: \"Физика\",\n                description: \"Введение в механику\",\n                teacherId: \"teacher\",          // учитель\n                participants: [], // например, какие-то студенты\n                materials: [\n                    {\n                        id: \"1743408573894\",\n                        title: \"Что такое физика?\",\n                        fileData: \"\",\n                        authorId: \"teacher\",\n                        createdAt: \"2025-03-31T08:09:33.893Z\",\n                        url: \"https://example.com/algebra.pdf\",\n                    },\n                ],\n                submissions: [\n                    {\n                        id: \"1743420673589\",\n                        grade: \"3\",\n                        studentId: \"iska\",\n                        fileData: \"data:image/svg+xml;base64,...\",\n                        comment: \"ыва\",\n                        createdAt: \"2025-03-31T11:31:13.588Z\",\n                    },\n                    {\n                        id: \"1743423911022\",\n                        grade: \"4\",\n                        studentId: \"student\",\n                        fileData: \"data:image/png;base64,...\",\n                        comment: \"Student\",\n                        createdAt: \"2025-03-31T12:25:11.022Z\",\n                    },\n                ],\n                url: \"\",\n            };\n            data.push(defaultCourse);\n            // Сохраняем обратно в localStorage\n            saveAllCourses(data);\n        }\n\n        // 4. Кладём в стейт (уже будет с нашим дефолтным курсом, если его не было)\n        setCourses(data);\n    }, []);\n\n    // Разделяем курсы на \"мои\" и \"другие\"\n    let myCourses = [];\n    let otherCourses = [];\n\n    if (user?.role === \"teacher\") {\n        myCourses = courses.filter((c) => c.teacherId === user.username);\n        otherCourses = courses.filter((c) => c.teacherId !== user.username);\n    } else if (user?.role === \"student\") {\n        myCourses = courses.filter((c) => c.participants.includes(user.username));\n        otherCourses = courses.filter((c) => !c.participants.includes(user.username));\n    }\n\n    // -----------------------\n    // CREATE (teacher)\n    // -----------------------\n    const openCreateModal = () => {\n        setIsCreateModalOpen(true);\n        createForm.resetFields();\n    };\n    const handleCancelCreate = () => {\n        setIsCreateModalOpen(false);\n        createForm.resetFields();\n    };\n    const handleCreateCourse = () => {\n        createForm.validateFields().then((values) => {\n            const { title, description } = values;\n            const newCourse = createCourse({\n                title,\n                description,\n                teacherId: user.username,\n                participants: [],\n                createdAt: new Date().toISOString(),\n            });\n            setCourses((prev) => [newCourse, ...prev]);\n            notification.success({ message: \"Курс успешно создан!\" });\n            handleCancelCreate();\n        });\n    };\n\n    // -----------------------\n    // JOIN COURSE (student)\n    // -----------------------\n    const handleJoinCourse = (courseId) => {\n        const course = courses.find((c) => c.id === courseId);\n        if (!course) return;\n        if (!course.participants.includes(user.username)) {\n            const updatedParticipants = [...course.participants, user.username];\n            // Обновим в хранилище\n            const updated = updateCourse(courseId, {\n                participants: updatedParticipants,\n            });\n            // Локально заменим объект\n            setCourses((prev) => prev.map((c) => (c.id === courseId ? updated : c)));\n            notification.success({ message: \"Вы записались на курс\" });\n        }\n    };\n\n    // -----------------------\n    // Переход на детальную страницу\n    // -----------------------\n    const goToDetail = (courseId) => {\n        navigate(`/courses/${courseId}`);\n    };\n\n    // =======================\n    // РЕНДЕР КАРТОЧЕК\n    // =======================\n    const renderMyCourseCard = (course) => {\n        return (\n            <Col key={course.id} xs={24} sm={12} md={8} lg={6} style={{ marginBottom: 16 }}>\n                <Card\n                    title={course.title}\n                    hoverable\n                    style={{ height: \"100%\", cursor: \"pointer\" }}\n                    onClick={() => goToDetail(course.id)}  // только переход\n                >\n                    <p>{course.description}</p>\n\n                    {/* Если студент, показываем что он участвует */}\n                    {user.role === \"student\" && course.participants.includes(user.username) && (\n                        <p style={{ color: \"green\" }}>Вы участвуете в курсе</p>\n                    )}\n                </Card>\n            </Col>\n        );\n    };\n\n    const renderOtherCourseCard = (course) => {\n        return (\n            <Col key={course.id} xs={24} sm={12} md={8} lg={6} style={{ marginBottom: 16 }}>\n                <Card\n                    title={course.title}\n                    hoverable={false}\n                    style={{ height: \"100%\", cursor: \"default\" }}\n                >\n                    <p>{course.description}</p>\n                    {/* Кнопка \"Записаться\" только для студентов, которые ещё не в курсе */}\n                    {user.role === \"student\" && !course.participants.includes(user.username) && (\n                        <Button type=\"primary\" onClick={() => handleJoinCourse(course.id)}>\n                            Записаться\n                        </Button>\n                    )}\n                </Card>\n            </Col>\n        );\n    };\n\n    return (\n        <div style={{ padding: 16 }}>\n            <h2>Курсы</h2>\n\n            {user?.role === \"teacher\" && (\n                <Button type=\"primary\" style={{ marginBottom: 16 }} onClick={openCreateModal}>\n                    Создать курс\n                </Button>\n            )}\n\n            <h3>Мои курсы</h3>\n            {myCourses.length === 0 ? (\n                <p>Нет курсов</p>\n            ) : (\n                <Row gutter={[16, 16]}>\n                    {myCourses.map((course) => renderMyCourseCard(course))}\n                </Row>\n            )}\n\n            {/* Другие курсы */}\n            <h3 style={{ marginTop: 32 }}>Другие курсы</h3>\n            {otherCourses.length === 0 ? (\n                <p>Нет курсов</p>\n            ) : (\n                <Row gutter={[16, 16]}>\n                    {otherCourses.map((course) => renderOtherCourseCard(course))}\n                </Row>\n            )}\n\n\n            {/* Модалка: Создать курс */}\n            <Modal\n                title=\"Создать курс\"\n                open={isCreateModalOpen}\n                onCancel={handleCancelCreate}\n                onOk={handleCreateCourse}\n            >\n                <Form layout=\"vertical\" form={createForm}>\n                    <Form.Item\n                        label=\"Название курса\"\n                        name=\"title\"\n                        rules={[{ required: true, message: \"Введите название\" }]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Описание курса\"\n                        name=\"description\"\n                        rules={[{ required: true, message: \"Введите описание\" }]}\n                    >\n                        <Input.TextArea rows={3} />\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </div>\n    );\n};\n"],"names":["CoursesPage","navigate","useNavigate","user","getSession","courses","setCourses","useState","isCreateModalOpen","setIsCreateModalOpen","createForm","Form","useForm","useEffect","data","getAllCourses","some","c","id","defaultCourse","title","description","teacherId","participants","materials","fileData","authorId","createdAt","url","submissions","grade","studentId","comment","push","saveAllCourses","myCourses","otherCourses","role","filter","username","includes","handleCancelCreate","resetFields","renderMyCourseCard","course","_jsx","Col","xs","sm","md","lg","style","marginBottom","children","_jsxs","Card","hoverable","height","cursor","onClick","goToDetail","courseId","concat","color","renderOtherCourseCard","Button","type","find","updatedParticipants","updated","updateCourse","prev","map","notification","success","message","handleJoinCourse","padding","openCreateModal","length","Row","gutter","marginTop","Modal","open","onCancel","onOk","handleCreateCourse","validateFields","then","values","newCourse","createCourse","Date","toISOString","layout","form","Item","label","name","rules","required","Input","TextArea","rows"],"sourceRoot":""}