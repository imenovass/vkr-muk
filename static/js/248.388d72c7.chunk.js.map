{"version":3,"file":"static/js/248.388d72c7.chunk.js","mappings":"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","sources":["entities/schedule/model/scheduleStorage.js","shared/ui/Card/Card.jsx","entities/news/model/newsStorage.js","pages/NewsPage/ui/NewsPage.jsx","pages/DashboardPage/ui/DashboardPage.jsx"],"sourcesContent":["// entities/schedule/model/scheduleStorage.js\n\nconst SCHEDULE_KEY = \"schedule\";\n\n// Какие-то начальные данные (mock)\nconst initialSchedule = [\n    {\n        id: \"101\",\n        courseId: \"1\",      // курс Математика\n        date: \"2025-02-01\", // YYYY-MM-DD\n        time: \"10:00\",      // строка (HH:mm)\n        room: \"Аудитория 305\",\n    },\n    {\n        id: \"102\",\n        courseId: \"2\",      // курс Физика\n        date: \"2025-02-02\",\n        time: \"12:30\",\n        room: \"Лаборатория 2\",\n    },\n];\n\nfunction saveSchedule(scheduleList) {\n    localStorage.setItem(SCHEDULE_KEY, JSON.stringify(scheduleList));\n}\n\n// Получаем все события расписания\nexport function getAllSchedule() {\n    const data = localStorage.getItem(SCHEDULE_KEY);\n    if (!data) {\n        localStorage.setItem(SCHEDULE_KEY, JSON.stringify(initialSchedule));\n        return initialSchedule;\n    }\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        console.error(\"Ошибка парсинга schedule из localStorage\", e);\n        return [];\n    }\n}\n\n// Добавляем новое событие\nexport function createScheduleEvent(eventData) {\n    const all = getAllSchedule();\n    const newId = String(Date.now());\n    const newEvent = { id: newId, ...eventData };\n    all.push(newEvent);\n    saveSchedule(all);\n    return newEvent;\n}\n\n// Удаляем событие\nexport function deleteScheduleEvent(id) {\n    let all = getAllSchedule();\n    all = all.filter((item) => item.id !== id);\n    saveSchedule(all);\n}\n\n// Можно сделать updateScheduleEvent, если понадобится\n","import React from 'react';\nimport { Button, Card, Col, Typography } from 'antd';\nimport './Card.scss';\n\nconst { Title, Text } = Typography;\n\nconst DashboardCard = ({ title, value, extra, link, linkText }) => (\n    <Col span={8}>\n        <Card className=\"dashboard-card\">\n            <Title level={4}>{title}</Title>\n            <Text className=\"dashboard-card-value\">{value}</Text>\n            {link && (\n                <div className=\"dashboard-card-link\">\n                    <Button type=\"primary\"  href={link}>{linkText}</Button>\n                </div>\n            )}\n        </Card>\n    </Col>\n);\n\nexport default DashboardCard;\n","// entities/news/model/newsStorage.js\n\nconst NEWS_KEY = \"news\";\n\nconst initialNews = [\n    {\n        id: \"1\",\n        author: \"Teacher Admin\",\n        role: \"teacher\",\n        title: \"Добро пожаловать!\",\n        content: \"Наша платформа открыта для всех!\",\n        createdAt: \"2025-01-10T09:30:00.000Z\"\n    },\n    {\n        id: \"2\",\n        author: \"Teacher Admin\",\n        role: \"teacher\",\n        title: \"Важное объявление\",\n        content: \"Завтра лекция по Математике отменяется!\",\n        createdAt: \"2025-01-15T12:00:00.000Z\"\n    },\n];\n\n// Вспомогательная функция для сохранения массива новостей\nfunction saveNewsList(list) {\n    localStorage.setItem(NEWS_KEY, JSON.stringify(list));\n}\n\n// Получить все новости (если нет - записать initialNews)\nexport function getAllNews() {\n    const data = localStorage.getItem(NEWS_KEY);\n    if (!data) {\n        saveNewsList(initialNews);\n        return initialNews;\n    }\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        console.error(\"Ошибка парсинга news из localStorage\", e);\n        return [];\n    }\n}\n\n// Создать новость\nexport function createNews(newsData) {\n    const list = getAllNews();\n    const newId = String(Date.now());\n    const newPost = {\n        id: newId,\n        ...newsData,\n    };\n    list.unshift(newPost); // добавим в начало, чтобы сразу шло сверху\n    saveNewsList(list);\n    return newPost;\n}\n\n// Обновить существующую новость\nexport function updateNews(id, updates) {\n    const list = getAllNews();\n    const index = list.findIndex((item) => item.id === id);\n    if (index === -1) return null;\n\n    list[index] = { ...list[index], ...updates };\n    saveNewsList(list);\n    return list[index];\n}\n\n// Удалить новость\nexport function deleteNews(id) {\n    let list = getAllNews();\n    list = list.filter((item) => item.id !== id);\n    saveNewsList(list);\n}\n","// pages/NewsPage/ui/NewsPage.jsx\n\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Card, Modal, Form, Input, notification } from \"antd\";\nimport { getSession } from \"../../../features/auth/model/session\";\nimport {\n    getAllNews,\n    createNews,\n    updateNews,\n    deleteNews,\n} from \"../../../entities/news/model/newsStorage\";\n\n// Импорт SASS (проверьте, что у вас настроен loader)\nimport \"./NewsPage.scss\";\n\nexport const NewsPage = () => {\n    const user = getSession(); // { login, role, fullName, ... }\n    const [newsList, setNewsList] = useState([]);\n\n    // --- Модалка \"Создать новость\" ---\n    const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n    const [createForm] = Form.useForm();\n\n    // --- Модалка \"Редактировать новость\" ---\n    const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n    const [editForm] = Form.useForm();\n    const [editingNewsId, setEditingNewsId] = useState(null);\n\n    useEffect(() => {\n        const list = getAllNews();\n        setNewsList(list); // уже отсортированное или нет — можно, например, list.sort(...)\n    }, []);\n\n    // -------------------------------\n    // СОЗДАНИЕ\n    // -------------------------------\n    const openCreateModal = () => {\n        setIsCreateModalOpen(true);\n        createForm.resetFields();\n    };\n\n    const handleCancelCreate = () => {\n        setIsCreateModalOpen(false);\n        createForm.resetFields();\n    };\n\n    const handleCreateFinish = (values) => {\n        try {\n            const newPost = createNews({\n                author: user.fullName || user.login,\n                role: user.role,\n                title: values.title,\n                content: values.content,\n                createdAt: new Date().toISOString(),\n            });\n            setNewsList((prev) => [newPost, ...prev]);\n            notification.success({ message: \"Новость опубликована!\" });\n            handleCancelCreate();\n        } catch (error) {\n            notification.error({ message: \"Ошибка при создании новости\" });\n            console.error(error);\n        }\n    };\n\n    // -------------------------------\n    // РЕДАКТИРОВАНИЕ\n    // -------------------------------\n    const openEditModal = (post) => {\n        setEditingNewsId(post.id);\n        setIsEditModalOpen(true);\n        editForm.setFieldsValue({\n            title: post.title,\n            content: post.content,\n        });\n    };\n\n    const handleCancelEdit = () => {\n        setIsEditModalOpen(false);\n        setEditingNewsId(null);\n        editForm.resetFields();\n    };\n\n    const handleEditFinish = (values) => {\n        try {\n            const updated = updateNews(editingNewsId, {\n                title: values.title,\n                content: values.content,\n            });\n            setNewsList((prev) =>\n                prev.map((item) => (item.id === editingNewsId ? updated : item))\n            );\n            notification.success({ message: \"Новость отредактирована!\" });\n            handleCancelEdit();\n        } catch (error) {\n            notification.error({ message: \"Ошибка при редактировании новости\" });\n            console.error(error);\n        }\n    };\n\n    // -------------------------------\n    // УДАЛЕНИЕ\n    // -------------------------------\n    const handleDelete = (postId) => {\n        try {\n            deleteNews(postId);\n            setNewsList((prev) => prev.filter((item) => item.id !== postId));\n            notification.success({ message: \"Новость удалена!\" });\n        } catch (error) {\n            notification.error({ message: \"Ошибка при удалении новости\" });\n            console.error(error);\n        }\n    };\n\n    return (\n        <div className=\"newsContainer\">\n            <h2>Новости</h2>\n\n            {user?.role === \"teacher\" && (\n                <Button\n                    type=\"primary\"\n                    style={{ marginBottom: 16 }}\n                    onClick={openCreateModal}\n                >\n                    Создать новость\n                </Button>\n            )}\n\n            <div className=\"newsList\">\n                {newsList.map((post) => (\n                    <div className=\"newsCard\" key={post.id}>\n                        <Card>\n                            <div className=\"newsMeta\">\n                                Автор: <b>{post.author}</b> |{\" \"}\n                                {new Date(post.createdAt).toLocaleString()}\n                            </div>\n                            <div className=\"newsTitle\">{post.title}</div>\n                            <div className=\"newsContent\">{post.content}</div>\n\n                            {user?.role === \"teacher\" && (\n                                <div style={{textAlign: \"right\", marginTop: 8}}>\n                                    <Button\n                                        type=\"link\"\n                                        onClick={() => openEditModal(post)}\n                                        style={{marginRight: 8}}\n                                    >\n                                        Редактировать\n                                    </Button>\n                                    <Button danger type=\"link\" onClick={() => handleDelete(post.id)}>\n                                        Удалить\n                                    </Button>\n                                </div>\n                            )}\n                        </Card>\n                    </div>\n                ))}\n            </div>\n\n            {/* Модалка: Создание */}\n            <Modal\n                title=\"Создать новость\"\n                open={isCreateModalOpen}\n                onCancel={handleCancelCreate}\n                onOk={() => createForm.submit()}\n            >\n                <Form form={createForm} layout=\"vertical\" onFinish={handleCreateFinish}>\n                    <Form.Item\n                        label=\"Заголовок\"\n                        name=\"title\"\n                        rules={[{ required: true, message: \"Введите заголовок новости\" }]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Содержание\"\n                        name=\"content\"\n                        rules={[{ required: true, message: \"Введите текст новости\" }]}\n                    >\n                        <Input.TextArea rows={4} />\n                    </Form.Item>\n                </Form>\n            </Modal>\n\n            {/* Модалка: Редактирование */}\n            <Modal\n                title=\"Редактировать новость\"\n                open={isEditModalOpen}\n                onCancel={handleCancelEdit}\n                onOk={() => editForm.submit()}\n            >\n                <Form form={editForm} layout=\"vertical\" onFinish={handleEditFinish}>\n                    <Form.Item\n                        label=\"Заголовок\"\n                        name=\"title\"\n                        rules={[{ required: true, message: \"Введите заголовок новости\" }]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Содержание\"\n                        name=\"content\"\n                        rules={[{ required: true, message: \"Введите текст новости\" }]}\n                    >\n                        <Input.TextArea rows={4} />\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </div>\n    );\n};\n","// pages/DashboardPage/ui/DashboardPage.jsx\nimport React, { useEffect, useState } from \"react\";\nimport { Card, Row, Col, Typography, Button } from \"antd\";\nimport { getSession } from \"../../../features/auth/model/session\";\nimport { getAllCourses } from \"../../../entities/course/model/courseStorage\";\nimport { getAllSchedule } from \"../../../entities/schedule/model/scheduleStorage\";\nimport DashboardCard from \"../../../shared/ui/Card/Card\";\nimport {NewsPage} from \"../../NewsPage/ui/NewsPage\";\n\nconst { Title, Text } = Typography;\n\nexport const DashboardPage = () => {\n    const [user, setUser] = useState(null);\n    const [courses, setCourses] = useState([]);\n    const [schedule, setSchedule] = useState([]);\n    const [closestEvent, setClosestEvent] = useState(null);\n\n    useEffect(() => {\n        const sessionUser = getSession();\n        if (sessionUser) {\n            setUser(sessionUser);\n        }\n\n        // Загрузим все курсы\n        const courseData = getAllCourses();\n        setCourses(courseData);\n\n        // Загрузим все события расписания\n        const scheduleData = getAllSchedule();\n        setSchedule(scheduleData);\n\n        // Найдём ближайшее событие (по дате/времени)\n        if (scheduleData.length > 0) {\n            const now = new Date();\n\n            // Преобразуем \"date\" + \"time\" в Date-объект\n            // и найдём самое ближайшее, которое еще не прошло\n            const upcomingEvents = scheduleData\n                .map((ev) => {\n                    const [year, month, day] = ev.date.split(\"-\");\n                    const [hours, minutes] = ev.time.split(\":\");\n                    const eventDate = new Date(\n                        +year,\n                        +month - 1, // месяцы в JS с 0\n                        +day,\n                        +hours,\n                        +minutes\n                    );\n                    return { ...ev, eventDate };\n                })\n                .filter((ev) => ev.eventDate > now)\n                .sort((a, b) => a.eventDate - b.eventDate);\n\n            if (upcomingEvents.length > 0) {\n                setClosestEvent(upcomingEvents[0]);\n            }\n        }\n    }, []);\n\n    // Подсчитаем, сколько курсов ведёт преподаватель (teacher) и т.д.\n    let teacherCoursesCount = 0;\n    if (user && user.role === \"teacher\") {\n        teacherCoursesCount = courses.filter((c) => c.teacherId === user.login).length;\n    }\n\n    return (\n        <div style={{ padding: \"16px\" }}>\n            <Title level={2}>Добро пожаловать, {user?.fullName}!</Title>\n            <Text>\n                Ваша роль: <b>{user?.role === \"teacher\" ? \"Преподаватель\" : \"Студент\"}</b>\n            </Text>\n\n            <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\n                <DashboardCard\n                    title=\"Всего курсов:\"\n                    value={courses.length}\n                    link=\"#/courses\"\n                    linkText=\"Перейти к курсам\"\n                />\n                <DashboardCard\n                    title=\"Расписание:\"\n                    value={`${schedule.length} занятий`}\n                    extra={closestEvent ? (\n                        <div>\n                            <Text type=\"secondary\">Ближайшее занятие:</Text>\n                            <div>\n                                <Text>{closestEvent.date} в {closestEvent.time}, курс ID {closestEvent.courseId}</Text>\n                            </div>\n                        </div>\n                    ) : (\n                        <Text type=\"secondary\">Ближайших занятий не найдено.</Text>\n                    )}\n                    link=\"#/schedule\"\n                    linkText=\"Посмотреть расписание\"\n                />\n\n                {/*<DashboardCard*/}\n                {/*    title=\"Материалы\"*/}\n                {/*    value=\"Здесь можно показать количество материалов и т.д.\"*/}\n                {/*    link=\"#/teacher-zone\"*/}\n                {/*    linkText=\"Управлять материалами (Teacher Zone)\"*/}\n                {/*/>*/}\n            </Row>\n            <NewsPage />\n        </div>\n    );\n};\n"],"names":["SCHEDULE_KEY","initialSchedule","id","courseId","date","time","room","saveSchedule","scheduleList","localStorage","setItem","JSON","stringify","getAllSchedule","data","getItem","parse","e","console","error","createScheduleEvent","eventData","all","newId","String","Date","now","newEvent","_objectSpread","push","deleteScheduleEvent","filter","item","Title","Text","Typography","_ref","title","value","extra","link","linkText","_jsx","Col","span","children","_jsxs","Card","className","level","Button","type","href","NEWS_KEY","initialNews","author","role","content","createdAt","saveNewsList","list","getAllNews","NewsPage","user","getSession","newsList","setNewsList","useState","isCreateModalOpen","setIsCreateModalOpen","createForm","Form","useForm","isEditModalOpen","setIsEditModalOpen","editForm","editingNewsId","setEditingNewsId","useEffect","handleCancelCreate","resetFields","handleCancelEdit","handleDelete","postId","deleteNews","prev","notification","success","message","style","marginBottom","onClick","openCreateModal","map","post","toLocaleString","textAlign","marginTop","setFieldsValue","openEditModal","marginRight","danger","Modal","open","onCancel","onOk","submit","form","layout","onFinish","values","newPost","newsData","unshift","createNews","fullName","login","toISOString","Item","label","name","rules","required","Input","TextArea","rows","updated","updates","index","findIndex","updateNews","DashboardPage","setUser","courses","setCourses","schedule","setSchedule","closestEvent","setClosestEvent","sessionUser","courseData","getAllCourses","scheduleData","length","upcomingEvents","ev","year","month","day","split","hours","minutes","eventDate","sort","a","b","teacherCoursesCount","c","teacherId","padding","Row","gutter","DashboardCard","concat"],"sourceRoot":""}