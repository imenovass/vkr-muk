{"version":3,"file":"static/js/583.a0f5aa1a.chunk.js","mappings":"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","sources":["pages/CoursesPage/ui/CoursesPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n    Row,\n    Col,\n    Card,\n    Button,\n    Modal,\n    Form,\n    Input,\n    notification,\n} from \"antd\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getSession } from \"../../../features/auth/model/session\";\nimport {\n    getAllCourses,\n    createCourse,\n    updateCourse,\n} from \"../../../entities/course/model/courseStorage\";\n\nexport const CoursesPage = () => {\n    const navigate = useNavigate();\n    const user = getSession();\n    const [courses, setCourses] = useState([]);\n\n    const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n    const [createForm] = Form.useForm();\n\n    useEffect(() => {\n        const data = getAllCourses();\n        setCourses(data);\n    }, []);\n\n    // Разделяем курсы на \"мои\" и \"другие\"\n    let myCourses = [];\n    let otherCourses = [];\n\n    if (user?.role === \"teacher\") {\n        myCourses = courses.filter((c) => c.teacherId === user.username);\n        otherCourses = courses.filter((c) => c.teacherId !== user.username);\n    } else if (user?.role === \"student\") {\n        myCourses = courses.filter((c) => c.participants.includes(user.username));\n        otherCourses = courses.filter((c) => !c.participants.includes(user.username));\n    }\n\n    // -----------------------\n    // CREATE (teacher)\n    // -----------------------\n    const openCreateModal = () => {\n        setIsCreateModalOpen(true);\n        createForm.resetFields();\n    };\n    const handleCancelCreate = () => {\n        setIsCreateModalOpen(false);\n        createForm.resetFields();\n    };\n    const handleCreateCourse = () => {\n        createForm.validateFields().then((values) => {\n            const { title, description } = values;\n            const newCourse = createCourse({\n                title,\n                description,\n                teacherId: user.username,\n                participants: [],\n                createdAt: new Date().toISOString(),\n            });\n            setCourses((prev) => [newCourse, ...prev]);\n            notification.success({ message: \"Курс успешно создан!\" });\n            handleCancelCreate();\n        });\n    };\n\n    // -----------------------\n    // JOIN COURSE (student)\n    // -----------------------\n    const handleJoinCourse = (courseId) => {\n        const course = courses.find((c) => c.id === courseId);\n        if (!course) return;\n        if (!course.participants.includes(user.username)) {\n            const updatedParticipants = [...course.participants, user.username];\n            // Обновим в хранилище\n            const updated = updateCourse(courseId, {\n                participants: updatedParticipants,\n            });\n            // Локально заменим объект\n            setCourses((prev) => prev.map((c) => (c.id === courseId ? updated : c)));\n            notification.success({ message: \"Вы записались на курс\" });\n        }\n    };\n\n    // -----------------------\n    // Переход на детальную страницу\n    // -----------------------\n    const goToDetail = (courseId) => {\n        navigate(`/courses/${courseId}`);\n    };\n\n    // =======================\n    // РЕНДЕР КАРТОЧЕК\n    // =======================\n    const renderMyCourseCard = (course) => {\n        return (\n            <Col key={course.id} xs={24} sm={12} md={8} lg={6} style={{ marginBottom: 16 }}>\n                <Card\n                    title={course.title}\n                    hoverable\n                    style={{ height: \"100%\", cursor: \"pointer\" }}\n                    onClick={() => goToDetail(course.id)}  // только переход\n                >\n                    <p>{course.description}</p>\n\n                    {/* Если студент, показываем что он участвует */}\n                    {user.role === \"student\" && course.participants.includes(user.username) && (\n                        <p style={{ color: \"green\" }}>Вы участвуете в курсе</p>\n                    )}\n                </Card>\n            </Col>\n        );\n    };\n\n    const renderOtherCourseCard = (course) => {\n        return (\n            <Col key={course.id} xs={24} sm={12} md={8} lg={6} style={{ marginBottom: 16 }}>\n                <Card\n                    title={course.title}\n                    hoverable={false}\n                    style={{ height: \"100%\", cursor: \"default\" }}\n                >\n                    <p>{course.description}</p>\n                    {/* Кнопка \"Записаться\" только для студентов, которые ещё не в курсе */}\n                    {user.role === \"student\" && !course.participants.includes(user.username) && (\n                        <Button type=\"primary\" onClick={() => handleJoinCourse(course.id)}>\n                            Записаться\n                        </Button>\n                    )}\n                </Card>\n            </Col>\n        );\n    };\n\n    return (\n        <div style={{ padding: 16 }}>\n            <h2>Курсы</h2>\n\n            {user?.role === \"teacher\" && (\n                <Button type=\"primary\" style={{ marginBottom: 16 }} onClick={openCreateModal}>\n                    Создать курс\n                </Button>\n            )}\n\n            {/* Мои курсы */}\n            <h3>Мои курсы</h3>\n            <Row gutter={[16, 16]}>\n                {myCourses.map((course) => renderMyCourseCard(course))}\n            </Row>\n\n            {/* Другие курсы */}\n            <h3 style={{ marginTop: 32 }}>Другие курсы</h3>\n            <Row gutter={[16, 16]}>\n                {otherCourses.map((course) => renderOtherCourseCard(course))}\n            </Row>\n\n            {/* Модалка: Создать курс */}\n            <Modal\n                title=\"Создать курс\"\n                open={isCreateModalOpen}\n                onCancel={handleCancelCreate}\n                onOk={handleCreateCourse}\n            >\n                <Form layout=\"vertical\" form={createForm}>\n                    <Form.Item\n                        label=\"Название курса\"\n                        name=\"title\"\n                        rules={[{ required: true, message: \"Введите название\" }]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Описание курса\"\n                        name=\"description\"\n                        rules={[{ required: true, message: \"Введите описание\" }]}\n                    >\n                        <Input.TextArea rows={3} />\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </div>\n    );\n};\n"],"names":["CoursesPage","navigate","useNavigate","user","getSession","courses","setCourses","useState","isCreateModalOpen","setIsCreateModalOpen","createForm","Form","useForm","useEffect","data","getAllCourses","myCourses","otherCourses","role","filter","c","teacherId","username","participants","includes","handleCancelCreate","resetFields","renderMyCourseCard","course","_jsx","Col","xs","sm","md","lg","style","marginBottom","children","_jsxs","Card","title","hoverable","height","cursor","onClick","goToDetail","courseId","id","concat","description","color","renderOtherCourseCard","Button","type","find","updatedParticipants","updated","updateCourse","prev","map","notification","success","message","handleJoinCourse","padding","openCreateModal","Row","gutter","marginTop","Modal","open","onCancel","onOk","handleCreateCourse","validateFields","then","values","newCourse","createCourse","createdAt","Date","toISOString","layout","form","Item","label","name","rules","required","Input","TextArea","rows"],"sourceRoot":""}