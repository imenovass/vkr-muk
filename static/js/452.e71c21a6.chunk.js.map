{"version":3,"file":"static/js/452.e71c21a6.chunk.js","mappings":"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","sources":["pages/CoursesPage/ui/CoursesPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nimport { Button, Card, Col, Form, Input, Modal, Row, notification } from 'antd'\n\nimport { createCourse, getAllCourses, saveAllCourses, updateCourse } from '../../../entities/course/model/courseStorage'\nimport { getSession } from '../../../features/auth/model/session'\nimport './styles.scss'\n\nexport const CoursesPage = () => {\n  const navigate = useNavigate()\n  const user = getSession()\n  const [courses, setCourses] = useState([])\n\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)\n  const [createForm] = Form.useForm()\n\n  useEffect(() => {\n    // 1. Считываем курсы из localStorage\n    let data = getAllCourses()\n\n    // 2. Если данных нет, добавляем стартовые курсы\n    if (data.length === 0) {\n      const defaultCourses = [\n        {\n          id: '1',\n          title: 'Математика',\n          description:\n            'Изучаем числа, формулы, функции и методы решения задач — всё, что нужно для науки, техники и современных технологий!',\n          teacherId: 'teacher',\n          participants: [],\n          materials: [],\n          submissions: [],\n          url: '',\n          createdAt: new Date().toISOString(),\n        },\n        {\n          id: '2',\n          title: 'Физика',\n          description:\n            'Изучаем движение, силы, энергию, волны, электричество и многое другое. Основа для технических и инженерных специальностей!',\n          teacherId: 'teacher',\n          participants: [],\n          materials: [],\n          submissions: [],\n          url: '',\n          createdAt: new Date().toISOString(),\n        },\n        {\n          id: '3',\n          title: 'Программная инженерия',\n          description:\n            'Узнаем как создавать качественное, надёжное и масштабируемое программное обеспечение. Изучаем полный цикл разработки, современные подходы (Agile, DevOps), проектирование, тестирование и командную работу.',\n          teacherId: 'teacher',\n          participants: [],\n          materials: [],\n          submissions: [],\n          url: '',\n          createdAt: new Date().toISOString(),\n        },\n        {\n          id: '4',\n          title: 'Английский язык',\n          description:\n            'Развиваем навыки чтения, письма, аудирования и разговорной речи. Учим язык — открываем мир!',\n          teacherId: 'teacher',\n          participants: [],\n          materials: [],\n          submissions: [],\n          url: '',\n          createdAt: new Date().toISOString(),\n        },\n      ]\n\n      // 3. Сохраняем стартовые курсы\n      saveAllCourses(defaultCourses)\n      data = defaultCourses\n    }\n\n    // 4. Кладём в стейт\n    setCourses(data)\n  }, [])\n\n\n  // Разделяем курсы на \"мои\" и \"другие\"\n  let myCourses = []\n  let otherCourses = []\n\n  if (user?.role === 'teacher') {\n    myCourses = courses.filter((c) => c.teacherId === user.username)\n    otherCourses = courses.filter((c) => c.teacherId !== user.username)\n  } else if (user?.role === 'student') {\n    myCourses = courses.filter((c) => c.participants.includes(user.username))\n    otherCourses = courses.filter((c) => !c.participants.includes(user.username))\n  }\n\n  // -----------------------\n  // CREATE (teacher)\n  // -----------------------\n  const openCreateModal = () => {\n    setIsCreateModalOpen(true)\n    createForm.resetFields()\n  }\n  const handleCancelCreate = () => {\n    setIsCreateModalOpen(false)\n    createForm.resetFields()\n  }\n  const handleCreateCourse = () => {\n    createForm.validateFields().then((values) => {\n      const { title, description } = values\n      const newCourse = createCourse({\n        title,\n        description,\n        teacherId: user.username,\n        participants: [],\n        createdAt: new Date().toISOString(),\n      })\n      setCourses((prev) => [newCourse, ...prev])\n      notification.success({ message: 'Курс успешно создан!' })\n      handleCancelCreate()\n    })\n  }\n\n  // -----------------------\n  // JOIN COURSE (student)\n  // -----------------------\n  const handleJoinCourse = (courseId) => {\n    const course = courses.find((c) => c.id === courseId)\n    if (!course) return\n    if (!course.participants.includes(user.username)) {\n      const updatedParticipants = [...course.participants, user.username]\n      // Обновим в хранилище\n      const updated = updateCourse(courseId, {\n        participants: updatedParticipants,\n      })\n      // Локально заменим объект\n      setCourses((prev) => prev.map((c) => (c.id === courseId ? updated : c)))\n      notification.success({ message: 'Вы записались на курс' })\n    }\n  }\n\n  // -----------------------\n  // Переход на детальную страницу\n  // -----------------------\n  const goToDetail = (courseId) => {\n    navigate(`/courses/${courseId}`)\n  }\n\n  const renderMyCourseCard = (course) => {\n    return (\n      <Col key={course.id} xs={24} sm={12} md={8} lg={6} style={{ marginBottom: 16 }}>\n        <Card\n          className=\"course-card\"\n          title={course.title}\n          hoverable\n          onClick={() => goToDetail(course.id)}\n        >\n          <div className=\"course-card-content\">\n            <div className=\"course-description\">{course.description}</div>\n\n\n            {user.role === 'student' && course.participants.includes(user.username) && (\n              <p className=\"course-status\">Вы участвуете в курсе</p>\n            )}\n          </div>\n        </Card>\n\n      </Col>\n  )\n  }\n\n  const renderOtherCourseCard = (course) => {\n    return (\n      <Col key={course.id} xs={24} sm={12} md={8} lg={6} style={{ marginBottom: 16 }}>\n        <Card\n          className=\"course-card\"\n          title={course.title}\n          hoverable={false}\n        >\n          <div className=\"course-card-content\">\n          <div className=\"course-description\">{course.description}</div>\n\n          {user.role === 'student' && !course.participants.includes(user.username) && (\n            <Button type=\"primary\" block size=\"small\" onClick={() => handleJoinCourse(course.id)}>\n              Записаться\n            </Button>\n          )}\n          </div>\n        </Card>\n\n      </Col>\n    )\n  }\n\n  return (\n    <div style={{ padding: 16 }}>\n      <h2>Курсы</h2>\n\n      {user?.role === 'teacher' && (\n        <Button type=\"primary\" style={{ marginBottom: 16 }} onClick={openCreateModal}>\n          Создать курс\n        </Button>\n      )}\n\n      <h3>Мои курсы</h3>\n      {myCourses.length === 0 ? (\n        <p>Нет курсов</p>\n      ) : (\n        <Row gutter={[16, 16]}>{myCourses.map((course) => renderMyCourseCard(course))}</Row>\n      )}\n\n      {/* Другие курсы */}\n      <h3 style={{ marginTop: 32 }}>Другие курсы</h3>\n      {otherCourses.length === 0 ? (\n        <p>Нет курсов</p>\n      ) : (\n        <Row gutter={[16, 16]}>{otherCourses.map((course) => renderOtherCourseCard(course))}</Row>\n      )}\n\n      {/* Модалка: Создать курс */}\n      <Modal title=\"Создать курс\" open={isCreateModalOpen} onCancel={handleCancelCreate} onOk={handleCreateCourse}>\n        <Form layout=\"vertical\" form={createForm}>\n          <Form.Item label=\"Название курса\" name=\"title\" rules={[{ required: true, message: 'Введите название' }]}>\n            <Input />\n          </Form.Item>\n          <Form.Item\n            label=\"Описание курса\"\n            name=\"description\"\n            rules={[{ required: true, message: 'Введите описание' }]}\n          >\n            <Input.TextArea rows={3} />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  )\n}\n"],"names":["CoursesPage","navigate","useNavigate","user","getSession","courses","setCourses","useState","isCreateModalOpen","setIsCreateModalOpen","createForm","Form","useForm","useEffect","data","getAllCourses","length","defaultCourses","id","title","description","teacherId","participants","materials","submissions","url","createdAt","Date","toISOString","saveAllCourses","myCourses","otherCourses","role","filter","c","username","includes","handleCancelCreate","resetFields","renderMyCourseCard","course","_jsx","Col","xs","sm","md","lg","style","marginBottom","children","Card","className","hoverable","onClick","goToDetail","courseId","concat","_jsxs","renderOtherCourseCard","Button","type","block","size","find","updatedParticipants","updated","updateCourse","prev","map","notification","success","message","handleJoinCourse","padding","openCreateModal","Row","gutter","marginTop","Modal","open","onCancel","onOk","handleCreateCourse","validateFields","then","values","newCourse","createCourse","layout","form","Item","label","name","rules","required","Input","TextArea","rows"],"sourceRoot":""}