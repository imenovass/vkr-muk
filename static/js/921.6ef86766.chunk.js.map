{"version":3,"file":"static/js/921.6ef86766.chunk.js","mappings":"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","sources":["entities/course/model/courseStorage.js","pages/CourseDetailPage/ui/CourseDetailPage.jsx"],"sourcesContent":["const STORAGE_KEY = \"courses\";\n\nconst initialCourses = [\n    {\n        id: \"1\",\n        title: \"Математика\",\n        description: \"Базовый курс по математике\",\n        teacherId: \"teacher\",\n    },\n    {\n        id: \"2\",\n        title: \"Физика\",\n        description: \"Введение в механику\",\n        teacherId: \"teacher\",\n    },\n];\n\nexport function getAllCourses() {\n    const data = localStorage.getItem(STORAGE_KEY);\n    if (!data) {\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(initialCourses));\n        return initialCourses;\n    }\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        console.error(\"Ошибка парсинга курсов из localStorage\", e);\n        return [];\n    }\n}\n\n// Функция поиска курса по id\nexport function getCourseById(id) {\n    const courses = getAllCourses();\n    return courses.find((c) => c.id === id) || null;\n}\n\n// Сохранить весь массив курсов\nfunction saveAllCourses(courses) {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(courses));\n}\n\n// Создать новый курс\nexport function createCourse(courseData) {\n    const courses = getAllCourses();\n    // Генерация условного ID\n    const newId = String(Date.now());\n    const newCourse = { id: newId, ...courseData };\n    courses.push(newCourse);\n    saveAllCourses(courses);\n    return newCourse;\n}\n\n// Обновить существующий курс\nexport function updateCourse(id, updates) {\n    const courses = getAllCourses();\n    const index = courses.findIndex((c) => c.id === id);\n    if (index === -1) return null;\n\n    courses[index] = { ...courses[index], ...updates };\n    saveAllCourses(courses);\n    return courses[index];\n}\n\n// Удалить курс\nexport function deleteCourse(id) {\n    let courses = getAllCourses();\n    courses = courses.filter((c) => c.id !== id);\n    saveAllCourses(courses);\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { Button, Card, Modal, Form, Input, notification } from \"antd\";\nimport {\n    getCourseById,\n    deleteCourse,\n    updateCourse,\n} from \"../../../entities/course/model/courseStorage\";\nimport { getSession } from \"../../../features/auth/model/session\";\n\nexport const CourseDetailPage = () => {\n    const { id } = useParams();\n    const navigate = useNavigate();\n    const user = getSession();\n\n    const [course, setCourse] = useState(null);\n\n    // Модалка для редактирования\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [form] = Form.useForm();\n\n    useEffect(() => {\n        const data = getCourseById(id);\n        if (!data) {\n            // Если курс не найден, уходим на /courses\n            navigate(\"/courses\");\n            return;\n        }\n        setCourse(data);\n    }, [id, navigate]);\n\n    if (!course) {\n        return null;\n    }\n\n    // Удаление курса (только преподаватель)\n    const handleDelete = () => {\n        deleteCourse(course.id);\n        notification.success({ message: \"Курс удалён\" });\n        navigate(\"/courses\");\n    };\n\n    // Открыть модалку для редактирования\n    const openEditModal = () => {\n        setIsModalOpen(true);\n        // Заполнить форму текущими данными\n        form.setFieldsValue({\n            title: course.title,\n            description: course.description,\n        });\n    };\n\n    // Закрыть модалку\n    const handleCancel = () => {\n        setIsModalOpen(false);\n        form.resetFields();\n    };\n\n    // Сохранить (обработчик формы)\n    const handleFinish = (values) => {\n        try {\n            // Вызываем updateCourse из локального хранилища\n            const updated = updateCourse(course.id, {\n                title: values.title,\n                description: values.description,\n            });\n            // Обновляем локальный state\n            setCourse(updated);\n            notification.success({ message: \"Курс успешно обновлён\" });\n            handleCancel();\n        } catch (error) {\n            notification.error({ message: \"Ошибка при обновлении курса\" });\n            console.error(error);\n        }\n    };\n\n    return (\n        <div style={{ maxWidth: 600 }}>\n            <Card title={course.title}>\n                <p>{course.description}</p>\n                <p>Teacher ID: {course.teacherId}</p>\n\n                {user?.role === \"teacher\" && (\n                    <div style={{ marginTop: \"16px\" }}>\n                        <Button type=\"primary\" onClick={openEditModal} style={{ marginRight: 8 }}>\n                            Редактировать\n                        </Button>\n                        <Button danger onClick={handleDelete}>\n                            Удалить\n                        </Button>\n                    </div>\n                )}\n            </Card>\n\n            {/* Модальное окно для редактирования */}\n            <Modal\n                title=\"Редактировать курс\"\n                open={isModalOpen}\n                onCancel={handleCancel}\n                onOk={() => form.submit()} // При нажатии \"ОК\" сабмитим форму\n            >\n                <Form\n                    form={form}\n                    layout=\"vertical\"\n                    onFinish={handleFinish}\n                    // Можно добавить onFinishFailed если хотите обработать ошибки валидации\n                >\n                    <Form.Item\n                        label=\"Название курса\"\n                        name=\"title\"\n                        rules={[{ required: true, message: \"Введите название курса\" }]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Описание\"\n                        name=\"description\"\n                        rules={[{ required: true, message: \"Введите описание курса\" }]}\n                    >\n                        <Input.TextArea rows={3} />\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </div>\n    );\n};\n"],"names":["STORAGE_KEY","initialCourses","id","title","description","teacherId","getAllCourses","data","localStorage","getItem","setItem","JSON","stringify","parse","e","console","error","getCourseById","find","c","saveAllCourses","courses","createCourse","courseData","newId","String","Date","now","newCourse","_objectSpread","push","updateCourse","updates","index","findIndex","deleteCourse","filter","CourseDetailPage","useParams","navigate","useNavigate","user","getSession","course","setCourse","useState","isModalOpen","setIsModalOpen","form","Form","useForm","useEffect","handleCancel","resetFields","_jsxs","style","maxWidth","children","Card","_jsx","role","marginTop","Button","type","onClick","openEditModal","setFieldsValue","marginRight","danger","handleDelete","notification","success","message","Modal","open","onCancel","onOk","submit","layout","onFinish","values","updated","Item","label","name","rules","required","Input","TextArea","rows"],"sourceRoot":""}