{"version":3,"file":"static/js/669.7c9d925b.chunk.js","mappings":"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","sources":["entities/course/model/courseStorage.js","entities/schedule/model/scheduleStorage.js","pages/SchedulePage/ui/SchedulePage.jsx"],"sourcesContent":["const STORAGE_KEY = \"courses\";\n\nconst initialCourses = [\n    {\n        id: \"1\",\n        title: \"Математика\",\n        description: \"Базовый курс по математике\",\n        teacherId: \"teacher\",\n    },\n    {\n        id: \"2\",\n        title: \"Физика\",\n        description: \"Введение в механику\",\n        teacherId: \"teacher\",\n    },\n];\n\nexport function getAllCourses() {\n    const data = localStorage.getItem(STORAGE_KEY);\n    if (!data) {\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(initialCourses));\n        return initialCourses;\n    }\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        console.error(\"Ошибка парсинга курсов из localStorage\", e);\n        return [];\n    }\n}\n\n// Функция поиска курса по id\nexport function getCourseById(id) {\n    const courses = getAllCourses();\n    return courses.find((c) => c.id === id) || null;\n}\n\n// Сохранить весь массив курсов\nfunction saveAllCourses(courses) {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(courses));\n}\n\n// Создать новый курс\nexport function createCourse(courseData) {\n    const courses = getAllCourses();\n    // Генерация условного ID\n    const newId = String(Date.now());\n    const newCourse = { id: newId, ...courseData };\n    courses.push(newCourse);\n    saveAllCourses(courses);\n    return newCourse;\n}\n\n// Обновить существующий курс\nexport function updateCourse(id, updates) {\n    const courses = getAllCourses();\n    const index = courses.findIndex((c) => c.id === id);\n    if (index === -1) return null;\n\n    courses[index] = { ...courses[index], ...updates };\n    saveAllCourses(courses);\n    return courses[index];\n}\n\n// Удалить курс\nexport function deleteCourse(id) {\n    let courses = getAllCourses();\n    courses = courses.filter((c) => c.id !== id);\n    saveAllCourses(courses);\n}\n","// entities/schedule/model/scheduleStorage.js\n\nconst SCHEDULE_KEY = \"schedule\";\n\n// Какие-то начальные данные (mock)\nconst initialSchedule = [\n    {\n        id: \"101\",\n        courseId: \"1\",      // курс Математика\n        date: \"2025-02-01\", // YYYY-MM-DD\n        time: \"10:00\",      // строка (HH:mm)\n        room: \"Аудитория 305\",\n    },\n    {\n        id: \"102\",\n        courseId: \"2\",      // курс Физика\n        date: \"2025-02-02\",\n        time: \"12:30\",\n        room: \"Лаборатория 2\",\n    },\n];\n\nfunction saveSchedule(scheduleList) {\n    localStorage.setItem(SCHEDULE_KEY, JSON.stringify(scheduleList));\n}\n\n// Получаем все события расписания\nexport function getAllSchedule() {\n    const data = localStorage.getItem(SCHEDULE_KEY);\n    if (!data) {\n        localStorage.setItem(SCHEDULE_KEY, JSON.stringify(initialSchedule));\n        return initialSchedule;\n    }\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        console.error(\"Ошибка парсинга schedule из localStorage\", e);\n        return [];\n    }\n}\n\n// Добавляем новое событие\nexport function createScheduleEvent(eventData) {\n    const all = getAllSchedule();\n    const newId = String(Date.now());\n    const newEvent = { id: newId, ...eventData };\n    all.push(newEvent);\n    saveSchedule(all);\n    return newEvent;\n}\n\n// Удаляем событие\nexport function deleteScheduleEvent(id) {\n    let all = getAllSchedule();\n    all = all.filter((item) => item.id !== id);\n    saveSchedule(all);\n}\n\n// Можно сделать updateScheduleEvent, если понадобится\n","// pages/SchedulePage/ui/SchedulePage.jsx\nimport React, { useEffect, useState } from \"react\";\nimport { Table, Button, Modal, Form, Input, DatePicker, TimePicker } from \"antd\";\nimport { createScheduleEvent, getAllSchedule, deleteScheduleEvent } from \"../../../entities/schedule/model/scheduleStorage\";\nimport { getAllCourses } from \"../../../entities/course/model/courseStorage\";\nimport { getSession } from \"../../../features/auth/model/session\";\n\nconst { RangePicker } = DatePicker; // может пригодиться, если захотим период\n\nexport const SchedulePage = () => {\n    const [data, setData] = useState([]);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [form] = Form.useForm();\n\n    const user = getSession();\n\n    useEffect(() => {\n        // Загружаем начальные данные расписания\n        const scheduleData = getAllSchedule();\n        setData(scheduleData);\n    }, []);\n\n    // Колонки таблицы\n    const columns = [\n        {\n            title: \"Дата\",\n            dataIndex: \"date\",\n            key: \"date\",\n        },\n        {\n            title: \"Время\",\n            dataIndex: \"time\",\n            key: \"time\",\n        },\n        {\n            title: \"Аудитория\",\n            dataIndex: \"room\",\n            key: \"room\",\n        },\n        {\n            title: \"ID курса\",\n            dataIndex: \"courseId\",\n            key: \"courseId\",\n        },\n        // Можно добавить название курса (для наглядности)\n        {\n            title: \"Действие\",\n            render: (text, record) => (\n                user?.role === \"teacher\" && (\n                    <Button danger onClick={() => handleDelete(record.id)}>\n                        Удалить\n                    </Button>\n                )\n            ),\n        },\n    ];\n\n    const handleDelete = (id) => {\n        deleteScheduleEvent(id);\n        // Обновить состояние\n        setData((prev) => prev.filter((item) => item.id !== id));\n    };\n\n    // Открыть модал для создания\n    const handleOpenModal = () => {\n        setIsModalOpen(true);\n    };\n\n    // Закрыть модал\n    const handleCancel = () => {\n        setIsModalOpen(false);\n        form.resetFields();\n    };\n\n    // Сохранить новое событие\n    const handleSave = () => {\n        form.validateFields().then((values) => {\n            const { date, time, room, courseId } = values;\n\n            createScheduleEvent({\n                date: date.format(\"YYYY-MM-DD\"),\n                time: time.format(\"HH:mm\"),\n                room,\n                courseId,\n            });\n            // Обновляем список\n            setData(getAllSchedule());\n            handleCancel();\n        });\n    };\n\n    return (\n        <div>\n            <h2>Расписание</h2>\n            {user?.role === \"teacher\" && (\n                <Button type=\"primary\" style={{ marginBottom: 16 }} onClick={handleOpenModal}>\n                    Добавить занятие\n                </Button>\n            )}\n\n            <Table columns={columns} dataSource={data} rowKey=\"id\" />\n\n            <Modal\n                visible={isModalOpen}\n                title=\"Добавить занятие\"\n                onCancel={handleCancel}\n                onOk={handleSave}\n            >\n                <Form form={form} layout=\"vertical\">\n                    <Form.Item\n                        label=\"Дата\"\n                        name=\"date\"\n                        rules={[{ required: true, message: \"Выберите дату\" }]}\n                    >\n                        <DatePicker format=\"YYYY-MM-DD\" style={{ width: \"100%\" }} />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Время\"\n                        name=\"time\"\n                        rules={[{ required: true, message: \"Выберите время\" }]}\n                    >\n                        <TimePicker format=\"HH:mm\" style={{ width: \"100%\" }} />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Аудитория\"\n                        name=\"room\"\n                        rules={[{ required: true, message: \"Введите аудиторию\" }]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"ID курса\"\n                        name=\"courseId\"\n                        rules={[{ required: true, message: \"Укажите ID курса\" }]}\n                    >\n                        <Input placeholder=\"Например, 1\" />\n                        {/* Можно вместо обычного Input сделать Select, подгрузив getAllCourses() */}\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </div>\n    );\n};\n"],"names":["STORAGE_KEY","initialCourses","id","title","description","teacherId","getAllCourses","data","localStorage","getItem","setItem","JSON","stringify","parse","e","console","error","getCourseById","find","c","saveAllCourses","courses","createCourse","courseData","newId","String","Date","now","newCourse","_objectSpread","push","updateCourse","updates","index","findIndex","deleteCourse","filter","SCHEDULE_KEY","initialSchedule","courseId","date","time","room","saveSchedule","scheduleList","getAllSchedule","createScheduleEvent","eventData","all","newEvent","deleteScheduleEvent","item","RangePicker","DatePicker","SchedulePage","setData","useState","isModalOpen","setIsModalOpen","form","Form","useForm","user","getSession","useEffect","scheduleData","columns","dataIndex","key","render","text","record","role","_jsx","Button","danger","onClick","handleDelete","children","prev","handleCancel","resetFields","_jsxs","type","style","marginBottom","handleOpenModal","Table","dataSource","rowKey","Modal","visible","onCancel","onOk","handleSave","validateFields","then","values","format","layout","Item","label","name","rules","required","message","width","TimePicker","Input","placeholder"],"sourceRoot":""}